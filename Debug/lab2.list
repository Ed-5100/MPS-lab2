
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c1c  08003c1c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003c1c  08003c1c  00013c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c24  08003c24  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c24  08003c24  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000074  08003ca0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000148  08003ca0  00020148  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000944e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001552  00000000  00000000  000294f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  0002aa48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000658  00000000  00000000  0002b148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ca56  00000000  00000000  0002b7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bbb  00000000  00000000  000581f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001120ea  00000000  00000000  0005edb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170e9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023bc  00000000  00000000  00170f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000006c  00000000  00000000  001732d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000000e3  00000000  00000000  00173340  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08003a90 	.word	0x08003a90

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08003a90 	.word	0x08003a90

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
int stage=0;
static int set=0;
static int task=4;
static int time=0;

int main() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	Sys_Init();
 80005e4:	f000 fb8a 	bl	8000cfc <Sys_Init>
	switch(task){
 80005e8:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <main+0xc0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3b02      	subs	r3, #2
 80005ee:	2b0a      	cmp	r3, #10
 80005f0:	d823      	bhi.n	800063a <main+0x5a>
 80005f2:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <main+0x18>)
 80005f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f8:	0800062b 	.word	0x0800062b
 80005fc:	0800063b 	.word	0x0800063b
 8000600:	08000631 	.word	0x08000631
 8000604:	0800063b 	.word	0x0800063b
 8000608:	0800063b 	.word	0x0800063b
 800060c:	0800063b 	.word	0x0800063b
 8000610:	0800063b 	.word	0x0800063b
 8000614:	0800063b 	.word	0x0800063b
 8000618:	0800063b 	.word	0x0800063b
 800061c:	08000625 	.word	0x08000625
 8000620:	0800063b 	.word	0x0800063b
	case 11: Init_GPIO_EXTI8(); break;
 8000624:	f000 f9e0 	bl	80009e8 <Init_GPIO_EXTI8>
 8000628:	e007      	b.n	800063a <main+0x5a>
	case 12: break;
	case 2: Init_Timer(); break;
 800062a:	f000 f9a9 	bl	8000980 <Init_Timer>
 800062e:	e004      	b.n	800063a <main+0x5a>
	case 3:	break;
	case 4:
		Init_Timer();
 8000630:	f000 f9a6 	bl	8000980 <Init_Timer>
		t4_init();
 8000634:	f000 f858 	bl	80006e8 <t4_init>
		break;
 8000638:	bf00      	nop
	}
	Init_Timer();
 800063a:	f000 f9a1 	bl	8000980 <Init_Timer>
	Init_GPIO_EXTI8();
 800063e:	f000 f9d3 	bl	80009e8 <Init_GPIO_EXTI8>
	printf("\033c\033[36m\033[2J");
 8000642:	4818      	ldr	r0, [pc, #96]	; (80006a4 <main+0xc4>)
 8000644:	f002 fc94 	bl	8002f70 <iprintf>
	fflush(stdout);
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <main+0xc8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fade 	bl	8002c10 <fflush>
		blinkScreen(); // Alternatively: in some terminals, the BELL can be configured to produce
					   // 			a "visual bell" ... a blink.
		*/

		//HAL_Delay(1000);
		switch(task){
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <main+0xc0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3b02      	subs	r3, #2
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d8fa      	bhi.n	8000654 <main+0x74>
 800065e:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <main+0x84>)
 8000660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000664:	08000655 	.word	0x08000655
 8000668:	08000655 	.word	0x08000655
 800066c:	08000697 	.word	0x08000697
 8000670:	08000655 	.word	0x08000655
 8000674:	08000655 	.word	0x08000655
 8000678:	08000655 	.word	0x08000655
 800067c:	08000655 	.word	0x08000655
 8000680:	08000655 	.word	0x08000655
 8000684:	08000655 	.word	0x08000655
 8000688:	08000691 	.word	0x08000691
 800068c:	08000655 	.word	0x08000655
		case 11: task1_reg_update(); break;
 8000690:	f000 f80c 	bl	80006ac <task1_reg_update>
 8000694:	e002      	b.n	800069c <main+0xbc>
		case 12: break;
		case 2: break;
		case 3:	break;
		case 4:
			t4_update();
 8000696:	f000 f839 	bl	800070c <t4_update>
			break;
 800069a:	bf00      	nop
		switch(task){
 800069c:	e7da      	b.n	8000654 <main+0x74>
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	08003aa8 	.word	0x08003aa8
 80006a8:	20000010 	.word	0x20000010

080006ac <task1_reg_update>:

//
//
// -- Utility Functions ------
//
void task1_reg_update(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	if(set){
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <task1_reg_update+0x30>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00e      	beq.n	80006d6 <task1_reg_update+0x2a>
		HAL_Delay(10);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f000 fcbf 	bl	800103c <HAL_Delay>
		if(GPIOC->IDR & 0x100 == 0x100)
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <task1_reg_update+0x34>)
 80006c0:	691b      	ldr	r3, [r3, #16]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d002      	beq.n	80006d0 <task1_reg_update+0x24>
			printf("Interrupted\r\n");
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <task1_reg_update+0x38>)
 80006cc:	f002 fcc4 	bl	8003058 <puts>
		set=0;
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <task1_reg_update+0x30>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
	}
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000ac 	.word	0x200000ac
 80006e0:	40020800 	.word	0x40020800
 80006e4:	08003ab4 	.word	0x08003ab4

080006e8 <t4_init>:

void t4_init(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	//srand(time(NULL));
	printf("\033[2J\033[37;40m");
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <t4_init+0x1c>)
 80006ee:	f002 fc3f 	bl	8002f70 <iprintf>
	fflush(stdout);
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <t4_init+0x20>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fa89 	bl	8002c10 <fflush>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	08003ac4 	.word	0x08003ac4
 8000708:	20000010 	.word	0x20000010

0800070c <t4_update>:

void t4_update(){
 800070c:	b5b0      	push	{r4, r5, r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af02      	add	r7, sp, #8
	if(stage==0){
 8000712:	4b76      	ldr	r3, [pc, #472]	; (80008ec <t4_update+0x1e0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d128      	bne.n	800076c <t4_update+0x60>
		printf("\033[5;30H");
 800071a:	4875      	ldr	r0, [pc, #468]	; (80008f0 <t4_update+0x1e4>)
 800071c:	f002 fc28 	bl	8002f70 <iprintf>
		fflush(stdout);
 8000720:	4b74      	ldr	r3, [pc, #464]	; (80008f4 <t4_update+0x1e8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fa72 	bl	8002c10 <fflush>
		printf("Running...");
 800072c:	4872      	ldr	r0, [pc, #456]	; (80008f8 <t4_update+0x1ec>)
 800072e:	f002 fc1f 	bl	8002f70 <iprintf>
		fflush(stdout);
 8000732:	4b70      	ldr	r3, [pc, #448]	; (80008f4 <t4_update+0x1e8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	4618      	mov	r0, r3
 800073a:	f002 fa69 	bl	8002c10 <fflush>
		randomNumber=rand() % 100+20;
 800073e:	f002 fc93 	bl	8003068 <rand>
 8000742:	4602      	mov	r2, r0
 8000744:	4b6d      	ldr	r3, [pc, #436]	; (80008fc <t4_update+0x1f0>)
 8000746:	fb83 1302 	smull	r1, r3, r3, r2
 800074a:	1159      	asrs	r1, r3, #5
 800074c:	17d3      	asrs	r3, r2, #31
 800074e:	1acb      	subs	r3, r1, r3
 8000750:	2164      	movs	r1, #100	; 0x64
 8000752:	fb01 f303 	mul.w	r3, r1, r3
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	3314      	adds	r3, #20
 800075a:	4a69      	ldr	r2, [pc, #420]	; (8000900 <t4_update+0x1f4>)
 800075c:	6013      	str	r3, [r2, #0]
		stage=1;
 800075e:	4b63      	ldr	r3, [pc, #396]	; (80008ec <t4_update+0x1e0>)
 8000760:	2201      	movs	r2, #1
 8000762:	601a      	str	r2, [r3, #0]
		time=0;
 8000764:	4b67      	ldr	r3, [pc, #412]	; (8000904 <t4_update+0x1f8>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]

		return;
 800076a:	e0bb      	b.n	80008e4 <t4_update+0x1d8>
	}
	if(stage==1){
 800076c:	4b5f      	ldr	r3, [pc, #380]	; (80008ec <t4_update+0x1e0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10a      	bne.n	800078a <t4_update+0x7e>
		if(randomNumber<time){
 8000774:	4b62      	ldr	r3, [pc, #392]	; (8000900 <t4_update+0x1f4>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b62      	ldr	r3, [pc, #392]	; (8000904 <t4_update+0x1f8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	f280 80b0 	bge.w	80008e2 <t4_update+0x1d6>
			stage=2;
 8000782:	4b5a      	ldr	r3, [pc, #360]	; (80008ec <t4_update+0x1e0>)
 8000784:	2202      	movs	r2, #2
 8000786:	601a      	str	r2, [r3, #0]
		}
		return;
 8000788:	e0ab      	b.n	80008e2 <t4_update+0x1d6>
	}
	if(stage==2){
 800078a:	4b58      	ldr	r3, [pc, #352]	; (80008ec <t4_update+0x1e0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d108      	bne.n	80007a4 <t4_update+0x98>
		stage=3;
 8000792:	4b56      	ldr	r3, [pc, #344]	; (80008ec <t4_update+0x1e0>)
 8000794:	2203      	movs	r2, #3
 8000796:	601a      	str	r2, [r3, #0]
		time=0;
 8000798:	4b5a      	ldr	r3, [pc, #360]	; (8000904 <t4_update+0x1f8>)
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
		blinkScreen();
 800079e:	f000 f8c5 	bl	800092c <blinkScreen>
		return;
 80007a2:	e09f      	b.n	80008e4 <t4_update+0x1d8>
	}
	if(stage==3){
 80007a4:	4b51      	ldr	r3, [pc, #324]	; (80008ec <t4_update+0x1e0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	f040 809b 	bne.w	80008e4 <t4_update+0x1d8>
		if(set){
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <t4_update+0x1fc>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f000 8096 	beq.w	80008e4 <t4_update+0x1d8>
			HAL_Delay(50);
 80007b8:	2032      	movs	r0, #50	; 0x32
 80007ba:	f000 fc3f 	bl	800103c <HAL_Delay>
			if(GPIOC->IDR & 0x100 == 0x100){
 80007be:	4b53      	ldr	r3, [pc, #332]	; (800090c <t4_update+0x200>)
 80007c0:	691b      	ldr	r3, [r3, #16]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f000 8083 	beq.w	80008d2 <t4_update+0x1c6>
				int temp=time;
 80007cc:	4b4d      	ldr	r3, [pc, #308]	; (8000904 <t4_update+0x1f8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	607b      	str	r3, [r7, #4]
				averageScore=(averageScore*iterations+temp)/(iterations+1);
 80007d2:	4b4f      	ldr	r3, [pc, #316]	; (8000910 <t4_update+0x204>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007de:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <t4_update+0x208>)
 80007e0:	edd3 7a00 	vldr	s15, [r3]
 80007e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	ee07 3a90 	vmov	s15, r3
 80007ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80007f6:	4b46      	ldr	r3, [pc, #280]	; (8000910 <t4_update+0x204>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	ee07 3a90 	vmov	s15, r3
 8000800:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000808:	4b42      	ldr	r3, [pc, #264]	; (8000914 <t4_update+0x208>)
 800080a:	edc3 7a00 	vstr	s15, [r3]
				iterations+=1;
 800080e:	4b40      	ldr	r3, [pc, #256]	; (8000910 <t4_update+0x204>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	4a3e      	ldr	r2, [pc, #248]	; (8000910 <t4_update+0x204>)
 8000816:	6013      	str	r3, [r2, #0]
				stage=0;
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <t4_update+0x1e0>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
				printf("\033[1;30H");
 800081e:	483e      	ldr	r0, [pc, #248]	; (8000918 <t4_update+0x20c>)
 8000820:	f002 fba6 	bl	8002f70 <iprintf>
				fflush(stdout);
 8000824:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <t4_update+0x1e8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	4618      	mov	r0, r3
 800082c:	f002 f9f0 	bl	8002c10 <fflush>
				printf("            ");
 8000830:	483a      	ldr	r0, [pc, #232]	; (800091c <t4_update+0x210>)
 8000832:	f002 fb9d 	bl	8002f70 <iprintf>
				fflush(stdout);
 8000836:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <t4_update+0x1e8>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	4618      	mov	r0, r3
 800083e:	f002 f9e7 	bl	8002c10 <fflush>
				printf("\033[4;25H");
 8000842:	4837      	ldr	r0, [pc, #220]	; (8000920 <t4_update+0x214>)
 8000844:	f002 fb94 	bl	8002f70 <iprintf>
				fflush(stdout);
 8000848:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <t4_update+0x1e8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	4618      	mov	r0, r3
 8000850:	f002 f9de 	bl	8002c10 <fflush>
				printf("   LAST:%d.%ds   AVG: %d.%ds   ",temp/10,temp%10,(int)averageScore/10,(int)averageScore%10);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a33      	ldr	r2, [pc, #204]	; (8000924 <t4_update+0x218>)
 8000858:	fb82 1203 	smull	r1, r2, r2, r3
 800085c:	1092      	asrs	r2, r2, #2
 800085e:	17db      	asrs	r3, r3, #31
 8000860:	1ad4      	subs	r4, r2, r3
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <t4_update+0x218>)
 8000866:	fb83 1302 	smull	r1, r3, r3, r2
 800086a:	1099      	asrs	r1, r3, #2
 800086c:	17d3      	asrs	r3, r2, #31
 800086e:	1ac9      	subs	r1, r1, r3
 8000870:	460b      	mov	r3, r1
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	440b      	add	r3, r1
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	1ad1      	subs	r1, r2, r3
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <t4_update+0x208>)
 800087c:	edd3 7a00 	vldr	s15, [r3]
 8000880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000884:	ee17 0a90 	vmov	r0, s15
 8000888:	4b26      	ldr	r3, [pc, #152]	; (8000924 <t4_update+0x218>)
 800088a:	fb83 2300 	smull	r2, r3, r3, r0
 800088e:	109a      	asrs	r2, r3, #2
 8000890:	17c3      	asrs	r3, r0, #31
 8000892:	1ad5      	subs	r5, r2, r3
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <t4_update+0x208>)
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800089e:	ee17 0a90 	vmov	r0, s15
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <t4_update+0x218>)
 80008a4:	fb83 2300 	smull	r2, r3, r3, r0
 80008a8:	109a      	asrs	r2, r3, #2
 80008aa:	17c3      	asrs	r3, r0, #31
 80008ac:	1ad2      	subs	r2, r2, r3
 80008ae:	4613      	mov	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	1ac2      	subs	r2, r0, r3
 80008b8:	9200      	str	r2, [sp, #0]
 80008ba:	462b      	mov	r3, r5
 80008bc:	460a      	mov	r2, r1
 80008be:	4621      	mov	r1, r4
 80008c0:	4819      	ldr	r0, [pc, #100]	; (8000928 <t4_update+0x21c>)
 80008c2:	f002 fb55 	bl	8002f70 <iprintf>
				fflush(stdout);
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <t4_update+0x1e8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 f99f 	bl	8002c10 <fflush>
			}
			set=0;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <t4_update+0x1fc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 80008d8:	2032      	movs	r0, #50	; 0x32
 80008da:	f000 fbaf 	bl	800103c <HAL_Delay>
			return;
 80008de:	bf00      	nop
 80008e0:	e000      	b.n	80008e4 <t4_update+0x1d8>
		return;
 80008e2:	bf00      	nop
		}
	}
}
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bdb0      	pop	{r4, r5, r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000a8 	.word	0x200000a8
 80008f0:	08003ad4 	.word	0x08003ad4
 80008f4:	20000010 	.word	0x20000010
 80008f8:	08003adc 	.word	0x08003adc
 80008fc:	51eb851f 	.word	0x51eb851f
 8000900:	20000098 	.word	0x20000098
 8000904:	200000b0 	.word	0x200000b0
 8000908:	200000ac 	.word	0x200000ac
 800090c:	40020800 	.word	0x40020800
 8000910:	200000a4 	.word	0x200000a4
 8000914:	200000a0 	.word	0x200000a0
 8000918:	08003ae8 	.word	0x08003ae8
 800091c:	08003af0 	.word	0x08003af0
 8000920:	08003b00 	.word	0x08003b00
 8000924:	66666667 	.word	0x66666667
 8000928:	08003b08 	.word	0x08003b08

0800092c <blinkScreen>:

void blinkScreen(){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	printf("\033[30;47m");
 8000930:	480e      	ldr	r0, [pc, #56]	; (800096c <blinkScreen+0x40>)
 8000932:	f002 fb1d 	bl	8002f70 <iprintf>
	// Clear and redraw display (flash it & sound the bell).
	printf("\a\033[s\033[2J\033[u");
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <blinkScreen+0x44>)
 8000938:	f002 fb1a 	bl	8002f70 <iprintf>
	fflush(stdout);
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <blinkScreen+0x48>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	4618      	mov	r0, r3
 8000944:	f002 f964 	bl	8002c10 <fflush>
	HAL_Delay(100);
 8000948:	2064      	movs	r0, #100	; 0x64
 800094a:	f000 fb77 	bl	800103c <HAL_Delay>

	printf("\033[37;40m");
 800094e:	480a      	ldr	r0, [pc, #40]	; (8000978 <blinkScreen+0x4c>)
 8000950:	f002 fb0e 	bl	8002f70 <iprintf>
	// Clear and redraw display (flash it).
	printf("\033[s\033[2J\033[u");
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <blinkScreen+0x50>)
 8000956:	f002 fb0b 	bl	8002f70 <iprintf>
	fflush(stdout);
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <blinkScreen+0x48>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	4618      	mov	r0, r3
 8000962:	f002 f955 	bl	8002c10 <fflush>
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	08003b28 	.word	0x08003b28
 8000970:	08003b34 	.word	0x08003b34
 8000974:	20000010 	.word	0x20000010
 8000978:	08003b40 	.word	0x08003b40
 800097c:	08003b4c 	.word	0x08003b4c

08000980 <Init_Timer>:

//
//
// -- Init Functions ----------
//
void Init_Timer() {
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
	// Enable the TIM6 interrupt.
	// Looks like HAL hid this little gem, this register isn't mentioned in
	//   the STM32F7 ARM Reference Manual....
	NVIC->ISER[54 / 32] = (uint32_t) 1 << (54 % 32);
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <Init_Timer+0x5c>)
 8000986:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800098a:	605a      	str	r2, [r3, #4]

	// Enable TIM2 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <Init_Timer+0x60>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <Init_Timer+0x60>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6413      	str	r3, [r2, #64]	; 0x40
	asm ( "nop" );
 8000998:	bf00      	nop
	asm ( "nop" );
 800099a:	bf00      	nop

	// Set pre-scaler to slow down ticlks
	TIM6->PSC=10799;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <Init_Timer+0x64>)
 800099e:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28

	// Set the Auto-reload Value for 10Hz overflow
	TIM6->ARR=999;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <Init_Timer+0x64>)
 80009a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c

	// Generate update events to auto reload.
	TIM6->EGR |= TIM_EGR_UG;
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <Init_Timer+0x64>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <Init_Timer+0x64>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6153      	str	r3, [r2, #20]

	// Enable Update Interrupts.
	TIM6->DIER |= TIM_DIER_UIE;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <Init_Timer+0x64>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <Init_Timer+0x64>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	60d3      	str	r3, [r2, #12]

	// Start the timer.
	TIM6->CR1 |= TIM_CR1_CEN;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <Init_Timer+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <Init_Timer+0x64>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40001000 	.word	0x40001000

080009e8 <Init_GPIO_EXTI8>:


void Init_GPIO_EXTI8() {
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
	//pc8 for pin d5
	// Enable GPIO clocks?
	// Looks like GPIO reg updates are synced to a base clock.
	//  for any changes to appear the clocks need to be running.
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <Init_GPIO_EXTI8+0x64>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <Init_GPIO_EXTI8+0x64>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6313      	str	r3, [r2, #48]	; 0x30
	// Enable clock to SYSCONFIG module to enable writing of EXTICRn registers
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <Init_GPIO_EXTI8+0x64>)
 80009fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <Init_GPIO_EXTI8+0x64>)
 80009fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a02:	6453      	str	r3, [r2, #68]	; 0x44
	// or __HAL_RCC_SYSCFG_CLK_ENABLE();
	// Delay after an RCC peripheral clock enabling
	asm ("nop");
 8000a04:	bf00      	nop
	asm ("nop");
 8000a06:	bf00      	nop
	// Set Pin 13/5 to output. (LED1 and LED2)
	//GPIOJ->MODER

	// GPIO Interrupt
	// By default pin PA0 will trigger the interrupt, change EXTICR3 to route proper pin
	SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI8_PC;// EXTICR1-4 are confusingly an array [0-3].
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <Init_GPIO_EXTI8+0x68>)
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <Init_GPIO_EXTI8+0x68>)
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	6113      	str	r3, [r2, #16]

	// Set Pin 8 as input (button) with pull-down.
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR8_1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <Init_GPIO_EXTI8+0x6c>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <Init_GPIO_EXTI8+0x6c>)
 8000a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1e:	60d3      	str	r3, [r2, #12]

	// Set interrupt enable for EXTI8.
	NVIC->ISER[23 / 32] = (uint32_t) 1 << (23 % 32);
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <Init_GPIO_EXTI8+0x70>)
 8000a22:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a26:	601a      	str	r2, [r3, #0]

	// Unmask interrupt.
	EXTI->IMR|=EXTI_IMR_MR8;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <Init_GPIO_EXTI8+0x74>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <Init_GPIO_EXTI8+0x74>)
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a32:	6013      	str	r3, [r2, #0]

	// Register for rising edge.
	EXTI->RTSR|=EXTI_RTSR_TR8;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <Init_GPIO_EXTI8+0x74>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <Init_GPIO_EXTI8+0x74>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	6093      	str	r3, [r2, #8]

	// And register for the falling edge.
	//EXTI->FTSR|=EXTI_FTSR_TR8;
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40013800 	.word	0x40013800
 8000a54:	40020800 	.word	0x40020800
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	40013c00 	.word	0x40013c00

08000a60 <TIM6_DAC_IRQHandler>:

//
//
// -- ISRs (IRQs) -------------
//
void TIM6_DAC_IRQHandler() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	// Clear Interrupt Bit
	TIM6->SR &= 0xFFFFFFFE;
 8000a64:	4b35      	ldr	r3, [pc, #212]	; (8000b3c <TIM6_DAC_IRQHandler+0xdc>)
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	4a34      	ldr	r2, [pc, #208]	; (8000b3c <TIM6_DAC_IRQHandler+0xdc>)
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	6113      	str	r3, [r2, #16]

	// Other code here:
	time+=1;
 8000a70:	4b33      	ldr	r3, [pc, #204]	; (8000b40 <TIM6_DAC_IRQHandler+0xe0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a32      	ldr	r2, [pc, #200]	; (8000b40 <TIM6_DAC_IRQHandler+0xe0>)
 8000a78:	6013      	str	r3, [r2, #0]
	if(task==2){
 8000a7a:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <TIM6_DAC_IRQHandler+0xe4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d128      	bne.n	8000ad4 <TIM6_DAC_IRQHandler+0x74>
		printf("\033[2;30H");
 8000a82:	4831      	ldr	r0, [pc, #196]	; (8000b48 <TIM6_DAC_IRQHandler+0xe8>)
 8000a84:	f002 fa74 	bl	8002f70 <iprintf>
		fflush(stdout);
 8000a88:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <TIM6_DAC_IRQHandler+0xec>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 f8be 	bl	8002c10 <fflush>
		printf("  %d.%d  ",time/10,time%10);
 8000a94:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <TIM6_DAC_IRQHandler+0xe0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a2d      	ldr	r2, [pc, #180]	; (8000b50 <TIM6_DAC_IRQHandler+0xf0>)
 8000a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9e:	1092      	asrs	r2, r2, #2
 8000aa0:	17db      	asrs	r3, r3, #31
 8000aa2:	1ad0      	subs	r0, r2, r3
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <TIM6_DAC_IRQHandler+0xe0>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <TIM6_DAC_IRQHandler+0xf0>)
 8000aaa:	fb83 1302 	smull	r1, r3, r3, r2
 8000aae:	1099      	asrs	r1, r3, #2
 8000ab0:	17d3      	asrs	r3, r2, #31
 8000ab2:	1ac9      	subs	r1, r1, r3
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	1ad1      	subs	r1, r2, r3
 8000abe:	460a      	mov	r2, r1
 8000ac0:	4601      	mov	r1, r0
 8000ac2:	4824      	ldr	r0, [pc, #144]	; (8000b54 <TIM6_DAC_IRQHandler+0xf4>)
 8000ac4:	f002 fa54 	bl	8002f70 <iprintf>
		fflush(stdout);
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <TIM6_DAC_IRQHandler+0xec>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 f89e 	bl	8002c10 <fflush>
	}
	if(task==4){
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <TIM6_DAC_IRQHandler+0xe4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d12c      	bne.n	8000b36 <TIM6_DAC_IRQHandler+0xd6>
		if(stage==3){
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <TIM6_DAC_IRQHandler+0xf8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d128      	bne.n	8000b36 <TIM6_DAC_IRQHandler+0xd6>
			printf("\033[1;30H");
 8000ae4:	481d      	ldr	r0, [pc, #116]	; (8000b5c <TIM6_DAC_IRQHandler+0xfc>)
 8000ae6:	f002 fa43 	bl	8002f70 <iprintf>
			fflush(stdout);
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <TIM6_DAC_IRQHandler+0xec>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 f88d 	bl	8002c10 <fflush>
			printf("  %d.%d  ",time/10,time%10);
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <TIM6_DAC_IRQHandler+0xe0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <TIM6_DAC_IRQHandler+0xf0>)
 8000afc:	fb82 1203 	smull	r1, r2, r2, r3
 8000b00:	1092      	asrs	r2, r2, #2
 8000b02:	17db      	asrs	r3, r3, #31
 8000b04:	1ad0      	subs	r0, r2, r3
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <TIM6_DAC_IRQHandler+0xe0>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <TIM6_DAC_IRQHandler+0xf0>)
 8000b0c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b10:	1099      	asrs	r1, r3, #2
 8000b12:	17d3      	asrs	r3, r2, #31
 8000b14:	1ac9      	subs	r1, r1, r3
 8000b16:	460b      	mov	r3, r1
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	1ad1      	subs	r1, r2, r3
 8000b20:	460a      	mov	r2, r1
 8000b22:	4601      	mov	r1, r0
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <TIM6_DAC_IRQHandler+0xf4>)
 8000b26:	f002 fa23 	bl	8002f70 <iprintf>
			fflush(stdout);
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <TIM6_DAC_IRQHandler+0xec>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 f86d 	bl	8002c10 <fflush>
		}
	}
	asm ("nop");
 8000b36:	bf00      	nop
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40001000 	.word	0x40001000
 8000b40:	200000b0 	.word	0x200000b0
 8000b44:	20000000 	.word	0x20000000
 8000b48:	08003b58 	.word	0x08003b58
 8000b4c:	20000010 	.word	0x20000010
 8000b50:	66666667 	.word	0x66666667
 8000b54:	08003b60 	.word	0x08003b60
 8000b58:	200000a8 	.word	0x200000a8
 8000b5c:	08003ae8 	.word	0x08003ae8

08000b60 <EXTI9_5_IRQHandler>:

// Non-HAL GPIO/EXTI Handler
void EXTI9_5_IRQHandler() {
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	// Clear Interrupt Bit by setting it to 1.
	EXTI->PR &= EXTI_PR_PR8;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <EXTI9_5_IRQHandler+0x24>)
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <EXTI9_5_IRQHandler+0x24>)
 8000b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6e:	6153      	str	r3, [r2, #20]
	// Other code here:
	set = 1;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <EXTI9_5_IRQHandler+0x28>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]

	asm ("nop");
 8000b76:	bf00      	nop
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40013c00 	.word	0x40013c00
 8000b88:	200000ac 	.word	0x200000ac

08000b8c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b94:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <SCB_EnableICache+0x3c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ba4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <SCB_EnableICache+0x3c>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <SCB_EnableICache+0x3c>)
 8000bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bb8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <SCB_EnableDCache+0x7c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bda:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <SCB_EnableDCache+0x7c>)
 8000be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000be4:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0b5b      	lsrs	r3, r3, #13
 8000bea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bee:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	08db      	lsrs	r3, r3, #3
 8000bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bf8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	015a      	lsls	r2, r3, #5
 8000bfe:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000c02:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c08:	490f      	ldr	r1, [pc, #60]	; (8000c48 <SCB_EnableDCache+0x7c>)
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1e5a      	subs	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1ef      	bne.n	8000bfa <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	60fa      	str	r2, [r7, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1e5      	bne.n	8000bf0 <SCB_EnableDCache+0x24>
 8000c24:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <SCB_EnableDCache+0x7c>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <SCB_EnableDCache+0x7c>)
 8000c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c32:	6153      	str	r3, [r2, #20]
 8000c34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c38:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b094      	sub	sp, #80	; 0x50
 8000c50:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c60:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c6c:	2319      	movs	r3, #25
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000c70:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c7a:	2309      	movs	r3, #9
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fcdb 	bl	8001640 <HAL_RCC_OscConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if(ret != HAL_OK) {
 8000c90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d000      	beq.n	8000c9a <SystemClock_Config+0x4e>
    while(1) { ; }
 8000c98:	e7fe      	b.n	8000c98 <SystemClock_Config+0x4c>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000c9a:	f000 fc81 	bl	80015a0 <HAL_PWREx_EnableOverDrive>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if(ret != HAL_OK) {
 8000ca4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d000      	beq.n	8000cae <SystemClock_Config+0x62>
    while(1) { ; }
 8000cac:	e7fe      	b.n	8000cac <SystemClock_Config+0x60>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000cae:	230f      	movs	r3, #15
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	64bb      	str	r3, [r7, #72]	; 0x48

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000cc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cca:	2107      	movs	r1, #7
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 ff65 	bl	8001b9c <HAL_RCC_ClockConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if(ret != HAL_OK) {
 8000cd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d000      	beq.n	8000ce2 <SystemClock_Config+0x96>
    while(1) { ; }
 8000ce0:	e7fe      	b.n	8000ce0 <SystemClock_Config+0x94>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3750      	adds	r7, #80	; 0x50
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  /* Enable I-Cache */
  SCB_EnableICache();
 8000cee:	f7ff ff4d 	bl	8000b8c <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 8000cf2:	f7ff ff6b 	bl	8000bcc <SCB_EnableDCache>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 8000d00:	f7ff fff3 	bl	8000cea <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8000d04:	f000 f926 	bl	8000f54 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000d08:	f7ff ffa0 	bl	8000c4c <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 8000d0c:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <Sys_Init+0x20>)
 8000d0e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000d12:	4803      	ldr	r0, [pc, #12]	; (8000d20 <Sys_Init+0x24>)
 8000d14:	f000 f88c 	bl	8000e30 <initUart>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	200000c0 	.word	0x200000c0

08000d24 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000d28:	f000 f968 	bl	8000ffc <HAL_IncTick>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a37      	ldr	r2, [pc, #220]	; (8000e1c <HAL_UART_MspInit+0xec>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d132      	bne.n	8000da8 <HAL_UART_MspInit+0x78>
		// Enable GPIO Clocks
		__GPIOA_CLK_ENABLE();
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <HAL_UART_MspInit+0xf0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a36      	ldr	r2, [pc, #216]	; (8000e20 <HAL_UART_MspInit+0xf0>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <HAL_UART_MspInit+0xf0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]

		// Initialize TX Pin
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d6c:	2307      	movs	r3, #7
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	482b      	ldr	r0, [pc, #172]	; (8000e24 <HAL_UART_MspInit+0xf4>)
 8000d78:	f000 fa68 	bl	800124c <HAL_GPIO_Init>

		// Initialize RX Pin
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d80:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4826      	ldr	r0, [pc, #152]	; (8000e24 <HAL_UART_MspInit+0xf4>)
 8000d8a:	f000 fa5f 	bl	800124c <HAL_GPIO_Init>

		// Enable UART Clocking
		__USART1_CLK_ENABLE();
 8000d8e:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <HAL_UART_MspInit+0xf0>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <HAL_UART_MspInit+0xf0>)
 8000d94:	f043 0310 	orr.w	r3, r3, #16
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HAL_UART_MspInit+0xf0>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8000da6:	e034      	b.n	8000e12 <HAL_UART_MspInit+0xe2>
	} else if (huart->Instance == USART6) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <HAL_UART_MspInit+0xf8>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12f      	bne.n	8000e12 <HAL_UART_MspInit+0xe2>
		__GPIOC_CLK_ENABLE();
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <HAL_UART_MspInit+0xf0>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a1a      	ldr	r2, [pc, #104]	; (8000e20 <HAL_UART_MspInit+0xf0>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_UART_MspInit+0xf0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000dda:	2308      	movs	r3, #8
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4811      	ldr	r0, [pc, #68]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000de6:	f000 fa31 	bl	800124c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <HAL_UART_MspInit+0xfc>)
 8000df6:	f000 fa29 	bl	800124c <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_UART_MspInit+0xf0>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_UART_MspInit+0xf0>)
 8000e00:	f043 0320 	orr.w	r3, r3, #32
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_UART_MspInit+0xf0>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
}
 8000e12:	bf00      	nop
 8000e14:	3730      	adds	r7, #48	; 0x30
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40011400 	.word	0x40011400
 8000e2c:	40020800 	.word	0x40020800

08000e30 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
	Uhand->Instance        = Tgt;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	601a      	str	r2, [r3, #0]

	Uhand->Init.BaudRate   = Baud;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	605a      	str	r2, [r3, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	220c      	movs	r2, #12
 8000e5e:	615a      	str	r2, [r3, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]

	HAL_UART_Init(Uhand);
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f001 f86a 	bl	8001f40 <HAL_UART_Init>
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	4804      	ldr	r0, [pc, #16]	; (8000e9c <_write+0x28>)
 8000e8c:	f001 f8a6 	bl	8001fdc <HAL_UART_Transmit>
	return len;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200000c0 	.word	0x200000c0

08000ea0 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	607b      	str	r3, [r7, #4]
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <_read+0x30>)
 8000ec2:	f001 f91c 	bl	80020fe <HAL_UART_Receive>
	return len;
 8000ec6:	687b      	ldr	r3, [r7, #4]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200000c0 	.word	0x200000c0

08000ed4 <Reset_Handler>:
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopFillZerobss+0x14>
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e003      	b.n	8000ee4 <LoopCopyDataInit>

08000edc <CopyDataInit>:
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <LoopFillZerobss+0x18>)
 8000ede:	585b      	ldr	r3, [r3, r1]
 8000ee0:	5043      	str	r3, [r0, r1]
 8000ee2:	3104      	adds	r1, #4

08000ee4 <LoopCopyDataInit>:
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <LoopFillZerobss+0x1c>)
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <LoopFillZerobss+0x20>)
 8000ee8:	1842      	adds	r2, r0, r1
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d3f6      	bcc.n	8000edc <CopyDataInit>
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <LoopFillZerobss+0x24>)
 8000ef0:	e002      	b.n	8000ef8 <LoopFillZerobss>

08000ef2 <FillZerobss>:
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f842 3b04 	str.w	r3, [r2], #4

08000ef8 <LoopFillZerobss>:
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <LoopFillZerobss+0x28>)
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d3f9      	bcc.n	8000ef2 <FillZerobss>
 8000efe:	f000 f813 	bl	8000f28 <SystemInit>
 8000f02:	f001 ff61 	bl	8002dc8 <__libc_init_array>
 8000f06:	f7ff fb6b 	bl	80005e0 <main>
 8000f0a:	4770      	bx	lr
 8000f0c:	20080000 	.word	0x20080000
 8000f10:	08003c2c 	.word	0x08003c2c
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000074 	.word	0x20000074
 8000f1c:	20000074 	.word	0x20000074
 8000f20:	20000148 	.word	0x20000148

08000f24 <ADC_IRQHandler>:
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>
	...

08000f28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <SystemInit+0x28>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <SystemInit+0x28>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SystemInit+0x28>)
 8000f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f42:	609a      	str	r2, [r3, #8]
#endif
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_Init+0x34>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_Init+0x34>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x34>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x34>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f937 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	200f      	movs	r0, #15
 8000f78:	f000 f810 	bl	8000f9c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f000 f806 	bl	8000f8c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f939 	bl	8001232 <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f000 f90f 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	2000000c 	.word	0x2000000c
 8000ff8:	20000008 	.word	0x20000008

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000000c 	.word	0x2000000c
 8001020:	20000140 	.word	0x20000140

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000140 	.word	0x20000140

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_Delay+0x40>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000000c 	.word	0x2000000c

08001080 <__NVIC_SetPriorityGrouping>:
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x40>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00
 80010c4:	05fa0000 	.word	0x05fa0000

080010c8 <__NVIC_GetPriorityGrouping>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_SetPriority>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff8e 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff47 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff5c 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff8e 	bl	8001138 <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffb0 	bl	80011a0 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	e175      	b.n	8001558 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	429a      	cmp	r2, r3
 8001286:	f040 8164 	bne.w	8001552 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d00b      	beq.n	80012aa <HAL_GPIO_Init+0x5e>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d007      	beq.n	80012aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129e:	2b11      	cmp	r3, #17
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b12      	cmp	r3, #18
 80012a8:	d130      	bne.n	800130c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 0201 	and.w	r2, r3, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x100>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b12      	cmp	r3, #18
 800134a:	d123      	bne.n	8001394 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	08da      	lsrs	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3208      	adds	r2, #8
 8001354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	220f      	movs	r2, #15
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	08da      	lsrs	r2, r3, #3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3208      	adds	r2, #8
 800138e:	69b9      	ldr	r1, [r7, #24]
 8001390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0203 	and.w	r2, r3, #3
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80be 	beq.w	8001552 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	4b65      	ldr	r3, [pc, #404]	; (800156c <HAL_GPIO_Init+0x320>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a64      	ldr	r2, [pc, #400]	; (800156c <HAL_GPIO_Init+0x320>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b62      	ldr	r3, [pc, #392]	; (800156c <HAL_GPIO_Init+0x320>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80013ee:	4a60      	ldr	r2, [pc, #384]	; (8001570 <HAL_GPIO_Init+0x324>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	220f      	movs	r2, #15
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a57      	ldr	r2, [pc, #348]	; (8001574 <HAL_GPIO_Init+0x328>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d037      	beq.n	800148a <HAL_GPIO_Init+0x23e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a56      	ldr	r2, [pc, #344]	; (8001578 <HAL_GPIO_Init+0x32c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d031      	beq.n	8001486 <HAL_GPIO_Init+0x23a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a55      	ldr	r2, [pc, #340]	; (800157c <HAL_GPIO_Init+0x330>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d02b      	beq.n	8001482 <HAL_GPIO_Init+0x236>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a54      	ldr	r2, [pc, #336]	; (8001580 <HAL_GPIO_Init+0x334>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d025      	beq.n	800147e <HAL_GPIO_Init+0x232>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a53      	ldr	r2, [pc, #332]	; (8001584 <HAL_GPIO_Init+0x338>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d01f      	beq.n	800147a <HAL_GPIO_Init+0x22e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a52      	ldr	r2, [pc, #328]	; (8001588 <HAL_GPIO_Init+0x33c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d019      	beq.n	8001476 <HAL_GPIO_Init+0x22a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a51      	ldr	r2, [pc, #324]	; (800158c <HAL_GPIO_Init+0x340>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d013      	beq.n	8001472 <HAL_GPIO_Init+0x226>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a50      	ldr	r2, [pc, #320]	; (8001590 <HAL_GPIO_Init+0x344>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00d      	beq.n	800146e <HAL_GPIO_Init+0x222>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4f      	ldr	r2, [pc, #316]	; (8001594 <HAL_GPIO_Init+0x348>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d007      	beq.n	800146a <HAL_GPIO_Init+0x21e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4e      	ldr	r2, [pc, #312]	; (8001598 <HAL_GPIO_Init+0x34c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_GPIO_Init+0x21a>
 8001462:	2309      	movs	r3, #9
 8001464:	e012      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001466:	230a      	movs	r3, #10
 8001468:	e010      	b.n	800148c <HAL_GPIO_Init+0x240>
 800146a:	2308      	movs	r3, #8
 800146c:	e00e      	b.n	800148c <HAL_GPIO_Init+0x240>
 800146e:	2307      	movs	r3, #7
 8001470:	e00c      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001472:	2306      	movs	r3, #6
 8001474:	e00a      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001476:	2305      	movs	r3, #5
 8001478:	e008      	b.n	800148c <HAL_GPIO_Init+0x240>
 800147a:	2304      	movs	r3, #4
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x240>
 800147e:	2303      	movs	r3, #3
 8001480:	e004      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001482:	2302      	movs	r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x240>
 800148a:	2300      	movs	r3, #0
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	f002 0203 	and.w	r2, r2, #3
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	4093      	lsls	r3, r2
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800149c:	4934      	ldr	r1, [pc, #208]	; (8001570 <HAL_GPIO_Init+0x324>)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014aa:	4b3c      	ldr	r3, [pc, #240]	; (800159c <HAL_GPIO_Init+0x350>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ce:	4a33      	ldr	r2, [pc, #204]	; (800159c <HAL_GPIO_Init+0x350>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014d4:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_GPIO_Init+0x350>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014f8:	4a28      	ldr	r2, [pc, #160]	; (800159c <HAL_GPIO_Init+0x350>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_GPIO_Init+0x350>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001522:	4a1e      	ldr	r2, [pc, #120]	; (800159c <HAL_GPIO_Init+0x350>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_GPIO_Init+0x350>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800154c:	4a13      	ldr	r2, [pc, #76]	; (800159c <HAL_GPIO_Init+0x350>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	f67f ae86 	bls.w	800126c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001560:	bf00      	nop
 8001562:	3724      	adds	r7, #36	; 0x24
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40023800 	.word	0x40023800
 8001570:	40013800 	.word	0x40013800
 8001574:	40020000 	.word	0x40020000
 8001578:	40020400 	.word	0x40020400
 800157c:	40020800 	.word	0x40020800
 8001580:	40020c00 	.word	0x40020c00
 8001584:	40021000 	.word	0x40021000
 8001588:	40021400 	.word	0x40021400
 800158c:	40021800 	.word	0x40021800
 8001590:	40021c00 	.word	0x40021c00
 8001594:	40022000 	.word	0x40022000
 8001598:	40022400 	.word	0x40022400
 800159c:	40013c00 	.word	0x40013c00

080015a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b23      	ldr	r3, [pc, #140]	; (8001638 <HAL_PWREx_EnableOverDrive+0x98>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a22      	ldr	r2, [pc, #136]	; (8001638 <HAL_PWREx_EnableOverDrive+0x98>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_PWREx_EnableOverDrive+0x98>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ce:	f7ff fd29 	bl	8001024 <HAL_GetTick>
 80015d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015d4:	e009      	b.n	80015ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015d6:	f7ff fd25 	bl	8001024 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015e4:	d901      	bls.n	80015ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e022      	b.n	8001630 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f6:	d1ee      	bne.n	80015d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0f      	ldr	r2, [pc, #60]	; (800163c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001602:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001604:	f7ff fd0e 	bl	8001024 <HAL_GetTick>
 8001608:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800160a:	e009      	b.n	8001620 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800160c:	f7ff fd0a 	bl	8001024 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800161a:	d901      	bls.n	8001620 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e007      	b.n	8001630 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800162c:	d1ee      	bne.n	800160c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800
 800163c:	40007000 	.word	0x40007000

08001640 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e29b      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8087 	beq.w	8001772 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001664:	4b96      	ldr	r3, [pc, #600]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b04      	cmp	r3, #4
 800166e:	d00c      	beq.n	800168a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001670:	4b93      	ldr	r3, [pc, #588]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b08      	cmp	r3, #8
 800167a:	d112      	bne.n	80016a2 <HAL_RCC_OscConfig+0x62>
 800167c:	4b90      	ldr	r3, [pc, #576]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001688:	d10b      	bne.n	80016a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168a:	4b8d      	ldr	r3, [pc, #564]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d06c      	beq.n	8001770 <HAL_RCC_OscConfig+0x130>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d168      	bne.n	8001770 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e275      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x7a>
 80016ac:	4b84      	ldr	r3, [pc, #528]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a83      	ldr	r2, [pc, #524]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80016b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e02e      	b.n	8001718 <HAL_RCC_OscConfig+0xd8>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x9c>
 80016c2:	4b7f      	ldr	r3, [pc, #508]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a7e      	ldr	r2, [pc, #504]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80016c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b7c      	ldr	r3, [pc, #496]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a7b      	ldr	r2, [pc, #492]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80016d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e01d      	b.n	8001718 <HAL_RCC_OscConfig+0xd8>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0xc0>
 80016e6:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a75      	ldr	r2, [pc, #468]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a72      	ldr	r2, [pc, #456]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0xd8>
 8001700:	4b6f      	ldr	r3, [pc, #444]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a6e      	ldr	r2, [pc, #440]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b6c      	ldr	r3, [pc, #432]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a6b      	ldr	r2, [pc, #428]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fc80 	bl	8001024 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fc7c 	bl	8001024 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e229      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b61      	ldr	r3, [pc, #388]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0xe8>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fc6c 	bl	8001024 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fc68 	bl	8001024 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e215      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	4b57      	ldr	r3, [pc, #348]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x110>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d069      	beq.n	8001852 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800177e:	4b50      	ldr	r3, [pc, #320]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178a:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b08      	cmp	r3, #8
 8001794:	d11c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x190>
 8001796:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d116      	bne.n	80017d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x17a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e1e9      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ba:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	493d      	ldr	r1, [pc, #244]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	e040      	b.n	8001852 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d023      	beq.n	8001820 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d8:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a38      	ldr	r2, [pc, #224]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fc1e 	bl	8001024 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ec:	f7ff fc1a 	bl	8001024 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1c7      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4929      	ldr	r1, [pc, #164]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
 800181e:	e018      	b.n	8001852 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff fbfa 	bl	8001024 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001834:	f7ff fbf6 	bl	8001024 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1a3      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d038      	beq.n	80018d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d019      	beq.n	800189a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 8001868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800186a:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff fbd7 	bl	8001024 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff fbd3 	bl	8001024 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e180      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 800188e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x23a>
 8001898:	e01a      	b.n	80018d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 800189c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <HAL_RCC_OscConfig+0x280>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a6:	f7ff fbbd 	bl	8001024 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ae:	f7ff fbb9 	bl	8001024 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d903      	bls.n	80018c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e166      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
 80018c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	4b92      	ldr	r3, [pc, #584]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 80018c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ee      	bne.n	80018ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80a4 	beq.w	8001a26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018de:	4b8c      	ldr	r3, [pc, #560]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10d      	bne.n	8001906 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b89      	ldr	r3, [pc, #548]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a88      	ldr	r2, [pc, #544]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b86      	ldr	r3, [pc, #536]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001902:	2301      	movs	r3, #1
 8001904:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001906:	4b83      	ldr	r3, [pc, #524]	; (8001b14 <HAL_RCC_OscConfig+0x4d4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d118      	bne.n	8001944 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001912:	4b80      	ldr	r3, [pc, #512]	; (8001b14 <HAL_RCC_OscConfig+0x4d4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7f      	ldr	r2, [pc, #508]	; (8001b14 <HAL_RCC_OscConfig+0x4d4>)
 8001918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191e:	f7ff fb81 	bl	8001024 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001926:	f7ff fb7d 	bl	8001024 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b64      	cmp	r3, #100	; 0x64
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e12a      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001938:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <HAL_RCC_OscConfig+0x4d4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x31a>
 800194c:	4b70      	ldr	r3, [pc, #448]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	4a6f      	ldr	r2, [pc, #444]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6713      	str	r3, [r2, #112]	; 0x70
 8001958:	e02d      	b.n	80019b6 <HAL_RCC_OscConfig+0x376>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0x33c>
 8001962:	4b6b      	ldr	r3, [pc, #428]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	4a6a      	ldr	r2, [pc, #424]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	6713      	str	r3, [r2, #112]	; 0x70
 800196e:	4b68      	ldr	r3, [pc, #416]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	4a67      	ldr	r2, [pc, #412]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	6713      	str	r3, [r2, #112]	; 0x70
 800197a:	e01c      	b.n	80019b6 <HAL_RCC_OscConfig+0x376>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b05      	cmp	r3, #5
 8001982:	d10c      	bne.n	800199e <HAL_RCC_OscConfig+0x35e>
 8001984:	4b62      	ldr	r3, [pc, #392]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4a61      	ldr	r2, [pc, #388]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6713      	str	r3, [r2, #112]	; 0x70
 8001990:	4b5f      	ldr	r3, [pc, #380]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	4a5e      	ldr	r2, [pc, #376]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6713      	str	r3, [r2, #112]	; 0x70
 800199c:	e00b      	b.n	80019b6 <HAL_RCC_OscConfig+0x376>
 800199e:	4b5c      	ldr	r3, [pc, #368]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a5b      	ldr	r2, [pc, #364]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
 80019aa:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	4a58      	ldr	r2, [pc, #352]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d015      	beq.n	80019ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff fb31 	bl	8001024 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff fb2d 	bl	8001024 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0d8      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019dc:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0ee      	beq.n	80019c6 <HAL_RCC_OscConfig+0x386>
 80019e8:	e014      	b.n	8001a14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff fb1b 	bl	8001024 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff fb17 	bl	8001024 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0c2      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a08:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1ee      	bne.n	80019f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d105      	bne.n	8001a26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1a:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a3c      	ldr	r2, [pc, #240]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 80ae 	beq.w	8001b8c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a30:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d06d      	beq.n	8001b18 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d14b      	bne.n	8001adc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a44:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fae8 	bl	8001024 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff fae4 	bl	8001024 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e091      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	071b      	lsls	r3, r3, #28
 8001aa2:	491b      	ldr	r1, [pc, #108]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fab6 	bl	8001024 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff fab2 	bl	8001024 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e05f      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x47c>
 8001ada:	e057      	b.n	8001b8c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fa9c 	bl	8001024 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff fa98 	bl	8001024 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e045      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b02:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_RCC_OscConfig+0x4d0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4b0>
 8001b0e:	e03d      	b.n	8001b8c <HAL_RCC_OscConfig+0x54c>
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <HAL_RCC_OscConfig+0x558>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d030      	beq.n	8001b88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d129      	bne.n	8001b88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d122      	bne.n	8001b88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b48:	4013      	ands	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d119      	bne.n	8001b88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	3b01      	subs	r3, #1
 8001b62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d10f      	bne.n	8001b88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800

08001b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0d0      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d910      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 020f 	bic.w	r2, r3, #15
 8001bca:	4965      	ldr	r1, [pc, #404]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0b8      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bfc:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a58      	ldr	r2, [pc, #352]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a52      	ldr	r2, [pc, #328]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c20:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	494d      	ldr	r1, [pc, #308]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d040      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d115      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e07f      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e073      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e06b      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f023 0203 	bic.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4936      	ldr	r1, [pc, #216]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c90:	f7ff f9c8 	bl	8001024 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7ff f9c4 	bl	8001024 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e053      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 020c 	and.w	r2, r3, #12
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1eb      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d210      	bcs.n	8001cf0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 020f 	bic.w	r2, r3, #15
 8001cd6:	4922      	ldr	r1, [pc, #136]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e032      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4916      	ldr	r1, [pc, #88]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	490e      	ldr	r1, [pc, #56]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d2e:	f000 f821 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8001d32:	4601      	mov	r1, r0
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_RCC_ClockConfig+0x1cc>)
 8001d40:	5cd3      	ldrb	r3, [r2, r3]
 8001d42:	fa21 f303 	lsr.w	r3, r1, r3
 8001d46:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1d0>)
 8001d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_ClockConfig+0x1d4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f924 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023c00 	.word	0x40023c00
 8001d64:	40023800 	.word	0x40023800
 8001d68:	08003b6c 	.word	0x08003b6c
 8001d6c:	20000004 	.word	0x20000004
 8001d70:	20000008 	.word	0x20000008

08001d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	2300      	movs	r3, #0
 8001d84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d8a:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d007      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x32>
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d008      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x38>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 808d 	bne.w	8001eba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001da0:	4b4b      	ldr	r3, [pc, #300]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001da2:	60bb      	str	r3, [r7, #8]
      break;
 8001da4:	e08c      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001da6:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001da8:	60bb      	str	r3, [r7, #8]
      break;
 8001daa:	e089      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dac:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001db6:	4b45      	ldr	r3, [pc, #276]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d023      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc2:	4b42      	ldr	r3, [pc, #264]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	099b      	lsrs	r3, r3, #6
 8001dc8:	f04f 0400 	mov.w	r4, #0
 8001dcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	ea03 0501 	and.w	r5, r3, r1
 8001dd8:	ea04 0602 	and.w	r6, r4, r2
 8001ddc:	4a3d      	ldr	r2, [pc, #244]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001dde:	fb02 f106 	mul.w	r1, r2, r6
 8001de2:	2200      	movs	r2, #0
 8001de4:	fb02 f205 	mul.w	r2, r2, r5
 8001de8:	440a      	add	r2, r1
 8001dea:	493a      	ldr	r1, [pc, #232]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001dec:	fba5 0101 	umull	r0, r1, r5, r1
 8001df0:	1853      	adds	r3, r2, r1
 8001df2:	4619      	mov	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f04f 0400 	mov.w	r4, #0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4623      	mov	r3, r4
 8001dfe:	f7fe fa6f 	bl	80002e0 <__aeabi_uldivmod>
 8001e02:	4603      	mov	r3, r0
 8001e04:	460c      	mov	r4, r1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e049      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	099b      	lsrs	r3, r3, #6
 8001e10:	f04f 0400 	mov.w	r4, #0
 8001e14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	ea03 0501 	and.w	r5, r3, r1
 8001e20:	ea04 0602 	and.w	r6, r4, r2
 8001e24:	4629      	mov	r1, r5
 8001e26:	4632      	mov	r2, r6
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	f04f 0400 	mov.w	r4, #0
 8001e30:	0154      	lsls	r4, r2, #5
 8001e32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e36:	014b      	lsls	r3, r1, #5
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	1b49      	subs	r1, r1, r5
 8001e3e:	eb62 0206 	sbc.w	r2, r2, r6
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	f04f 0400 	mov.w	r4, #0
 8001e4a:	0194      	lsls	r4, r2, #6
 8001e4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e50:	018b      	lsls	r3, r1, #6
 8001e52:	1a5b      	subs	r3, r3, r1
 8001e54:	eb64 0402 	sbc.w	r4, r4, r2
 8001e58:	f04f 0100 	mov.w	r1, #0
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	00e2      	lsls	r2, r4, #3
 8001e62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e66:	00d9      	lsls	r1, r3, #3
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4614      	mov	r4, r2
 8001e6c:	195b      	adds	r3, r3, r5
 8001e6e:	eb44 0406 	adc.w	r4, r4, r6
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	02a2      	lsls	r2, r4, #10
 8001e7c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e80:	0299      	lsls	r1, r3, #10
 8001e82:	460b      	mov	r3, r1
 8001e84:	4614      	mov	r4, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	4621      	mov	r1, r4
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f04f 0400 	mov.w	r4, #0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4623      	mov	r3, r4
 8001e94:	f7fe fa24 	bl	80002e0 <__aeabi_uldivmod>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	460c      	mov	r4, r1
 8001e9c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	0c1b      	lsrs	r3, r3, #16
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	60bb      	str	r3, [r7, #8]
      break;
 8001eb8:	e002      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001ebc:	60bb      	str	r3, [r7, #8]
      break;
 8001ebe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	00f42400 	.word	0x00f42400
 8001ed4:	017d7840 	.word	0x017d7840

08001ed8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_RCC_GetHCLKFreq+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000004 	.word	0x20000004

08001ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ef4:	f7ff fff0 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001ef8:	4601      	mov	r1, r0
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0a9b      	lsrs	r3, r3, #10
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4a03      	ldr	r2, [pc, #12]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	08003b7c 	.word	0x08003b7c

08001f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f1c:	f7ff ffdc 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001f20:	4601      	mov	r1, r0
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	0b5b      	lsrs	r3, r3, #13
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	08003b7c 	.word	0x08003b7c

08001f40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e040      	b.n	8001fd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe fee4 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2224      	movs	r2, #36	; 0x24
 8001f6c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f98a 	bl	8002298 <UART_SetConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e022      	b.n	8001fd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fc28 	bl	80027ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001faa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fcaf 	bl	8002930 <UART_CheckIdleState>
 8001fd2:	4603      	mov	r3, r0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	d17f      	bne.n	80020f4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <HAL_UART_Transmit+0x24>
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e078      	b.n	80020f6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_UART_Transmit+0x36>
 800200e:	2302      	movs	r3, #2
 8002010:	e071      	b.n	80020f6 <HAL_UART_Transmit+0x11a>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2221      	movs	r2, #33	; 0x21
 8002024:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002026:	f7fe fffd 	bl	8001024 <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	88fa      	ldrh	r2, [r7, #6]
 8002030:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002044:	d108      	bne.n	8002058 <HAL_UART_Transmit+0x7c>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d104      	bne.n	8002058 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	e003      	b.n	8002060 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002068:	e02c      	b.n	80020c4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2200      	movs	r2, #0
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 fca0 	bl	80029ba <UART_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e038      	b.n	80020f6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10b      	bne.n	80020a2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	3302      	adds	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	e007      	b.n	80020b2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	781a      	ldrb	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	3301      	adds	r3, #1
 80020b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1cc      	bne.n	800206a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2140      	movs	r1, #64	; 0x40
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 fc6d 	bl	80029ba <UART_WaitOnFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e005      	b.n	80020f6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2220      	movs	r2, #32
 80020ee:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e000      	b.n	80020f6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3720      	adds	r7, #32
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b08a      	sub	sp, #40	; 0x28
 8002102:	af02      	add	r7, sp, #8
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	4613      	mov	r3, r2
 800210c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002112:	2b20      	cmp	r3, #32
 8002114:	f040 80ba 	bne.w	800228c <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <HAL_UART_Receive+0x26>
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0b2      	b.n	800228e <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_UART_Receive+0x38>
 8002132:	2302      	movs	r3, #2
 8002134:	e0ab      	b.n	800228e <HAL_UART_Receive+0x190>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2222      	movs	r2, #34	; 0x22
 8002148:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800214a:	f7fe ff6b 	bl	8001024 <HAL_GetTick>
 800214e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	88fa      	ldrh	r2, [r7, #6]
 8002154:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	88fa      	ldrh	r2, [r7, #6]
 800215c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002168:	d10e      	bne.n	8002188 <HAL_UART_Receive+0x8a>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <HAL_UART_Receive+0x80>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002178:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800217c:	e02d      	b.n	80021da <HAL_UART_Receive+0xdc>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	22ff      	movs	r2, #255	; 0xff
 8002182:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002186:	e028      	b.n	80021da <HAL_UART_Receive+0xdc>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10d      	bne.n	80021ac <HAL_UART_Receive+0xae>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d104      	bne.n	80021a2 <HAL_UART_Receive+0xa4>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	22ff      	movs	r2, #255	; 0xff
 800219c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80021a0:	e01b      	b.n	80021da <HAL_UART_Receive+0xdc>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	227f      	movs	r2, #127	; 0x7f
 80021a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80021aa:	e016      	b.n	80021da <HAL_UART_Receive+0xdc>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021b4:	d10d      	bne.n	80021d2 <HAL_UART_Receive+0xd4>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d104      	bne.n	80021c8 <HAL_UART_Receive+0xca>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	227f      	movs	r2, #127	; 0x7f
 80021c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80021c6:	e008      	b.n	80021da <HAL_UART_Receive+0xdc>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	223f      	movs	r2, #63	; 0x3f
 80021cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80021d0:	e003      	b.n	80021da <HAL_UART_Receive+0xdc>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80021e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ea:	d108      	bne.n	80021fe <HAL_UART_Receive+0x100>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d104      	bne.n	80021fe <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	e003      	b.n	8002206 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800220e:	e032      	b.n	8002276 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2200      	movs	r2, #0
 8002218:	2120      	movs	r1, #32
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fbcd 	bl	80029ba <UART_WaitOnFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e031      	b.n	800228e <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10c      	bne.n	800224a <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	b29a      	uxth	r2, r3
 8002238:	8a7b      	ldrh	r3, [r7, #18]
 800223a:	4013      	ands	r3, r2
 800223c:	b29a      	uxth	r2, r3
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	3302      	adds	r3, #2
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	e00c      	b.n	8002264 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	b2da      	uxtb	r2, r3
 8002252:	8a7b      	ldrh	r3, [r7, #18]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	4013      	ands	r3, r2
 8002258:	b2da      	uxtb	r2, r3
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3301      	adds	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1c6      	bne.n	8002210 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2220      	movs	r2, #32
 8002286:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800228c:	2302      	movs	r3, #2
  }
}
 800228e:	4618      	mov	r0, r3
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4bb1      	ldr	r3, [pc, #708]	; (800258c <UART_SetConfig+0x2f4>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	6939      	ldr	r1, [r7, #16]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	430a      	orrs	r2, r1
 800230c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a9f      	ldr	r2, [pc, #636]	; (8002590 <UART_SetConfig+0x2f8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d121      	bne.n	800235c <UART_SetConfig+0xc4>
 8002318:	4b9e      	ldr	r3, [pc, #632]	; (8002594 <UART_SetConfig+0x2fc>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b03      	cmp	r3, #3
 8002324:	d816      	bhi.n	8002354 <UART_SetConfig+0xbc>
 8002326:	a201      	add	r2, pc, #4	; (adr r2, 800232c <UART_SetConfig+0x94>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	0800233d 	.word	0x0800233d
 8002330:	08002349 	.word	0x08002349
 8002334:	08002343 	.word	0x08002343
 8002338:	0800234f 	.word	0x0800234f
 800233c:	2301      	movs	r3, #1
 800233e:	77fb      	strb	r3, [r7, #31]
 8002340:	e151      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002342:	2302      	movs	r3, #2
 8002344:	77fb      	strb	r3, [r7, #31]
 8002346:	e14e      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002348:	2304      	movs	r3, #4
 800234a:	77fb      	strb	r3, [r7, #31]
 800234c:	e14b      	b.n	80025e6 <UART_SetConfig+0x34e>
 800234e:	2308      	movs	r3, #8
 8002350:	77fb      	strb	r3, [r7, #31]
 8002352:	e148      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002354:	2310      	movs	r3, #16
 8002356:	77fb      	strb	r3, [r7, #31]
 8002358:	bf00      	nop
 800235a:	e144      	b.n	80025e6 <UART_SetConfig+0x34e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a8d      	ldr	r2, [pc, #564]	; (8002598 <UART_SetConfig+0x300>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d134      	bne.n	80023d0 <UART_SetConfig+0x138>
 8002366:	4b8b      	ldr	r3, [pc, #556]	; (8002594 <UART_SetConfig+0x2fc>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b0c      	cmp	r3, #12
 8002372:	d829      	bhi.n	80023c8 <UART_SetConfig+0x130>
 8002374:	a201      	add	r2, pc, #4	; (adr r2, 800237c <UART_SetConfig+0xe4>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	080023b1 	.word	0x080023b1
 8002380:	080023c9 	.word	0x080023c9
 8002384:	080023c9 	.word	0x080023c9
 8002388:	080023c9 	.word	0x080023c9
 800238c:	080023bd 	.word	0x080023bd
 8002390:	080023c9 	.word	0x080023c9
 8002394:	080023c9 	.word	0x080023c9
 8002398:	080023c9 	.word	0x080023c9
 800239c:	080023b7 	.word	0x080023b7
 80023a0:	080023c9 	.word	0x080023c9
 80023a4:	080023c9 	.word	0x080023c9
 80023a8:	080023c9 	.word	0x080023c9
 80023ac:	080023c3 	.word	0x080023c3
 80023b0:	2300      	movs	r3, #0
 80023b2:	77fb      	strb	r3, [r7, #31]
 80023b4:	e117      	b.n	80025e6 <UART_SetConfig+0x34e>
 80023b6:	2302      	movs	r3, #2
 80023b8:	77fb      	strb	r3, [r7, #31]
 80023ba:	e114      	b.n	80025e6 <UART_SetConfig+0x34e>
 80023bc:	2304      	movs	r3, #4
 80023be:	77fb      	strb	r3, [r7, #31]
 80023c0:	e111      	b.n	80025e6 <UART_SetConfig+0x34e>
 80023c2:	2308      	movs	r3, #8
 80023c4:	77fb      	strb	r3, [r7, #31]
 80023c6:	e10e      	b.n	80025e6 <UART_SetConfig+0x34e>
 80023c8:	2310      	movs	r3, #16
 80023ca:	77fb      	strb	r3, [r7, #31]
 80023cc:	bf00      	nop
 80023ce:	e10a      	b.n	80025e6 <UART_SetConfig+0x34e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a71      	ldr	r2, [pc, #452]	; (800259c <UART_SetConfig+0x304>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d120      	bne.n	800241c <UART_SetConfig+0x184>
 80023da:	4b6e      	ldr	r3, [pc, #440]	; (8002594 <UART_SetConfig+0x2fc>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023e4:	2b10      	cmp	r3, #16
 80023e6:	d00f      	beq.n	8002408 <UART_SetConfig+0x170>
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d802      	bhi.n	80023f2 <UART_SetConfig+0x15a>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <UART_SetConfig+0x164>
 80023f0:	e010      	b.n	8002414 <UART_SetConfig+0x17c>
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d005      	beq.n	8002402 <UART_SetConfig+0x16a>
 80023f6:	2b30      	cmp	r3, #48	; 0x30
 80023f8:	d009      	beq.n	800240e <UART_SetConfig+0x176>
 80023fa:	e00b      	b.n	8002414 <UART_SetConfig+0x17c>
 80023fc:	2300      	movs	r3, #0
 80023fe:	77fb      	strb	r3, [r7, #31]
 8002400:	e0f1      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002402:	2302      	movs	r3, #2
 8002404:	77fb      	strb	r3, [r7, #31]
 8002406:	e0ee      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002408:	2304      	movs	r3, #4
 800240a:	77fb      	strb	r3, [r7, #31]
 800240c:	e0eb      	b.n	80025e6 <UART_SetConfig+0x34e>
 800240e:	2308      	movs	r3, #8
 8002410:	77fb      	strb	r3, [r7, #31]
 8002412:	e0e8      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002414:	2310      	movs	r3, #16
 8002416:	77fb      	strb	r3, [r7, #31]
 8002418:	bf00      	nop
 800241a:	e0e4      	b.n	80025e6 <UART_SetConfig+0x34e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a5f      	ldr	r2, [pc, #380]	; (80025a0 <UART_SetConfig+0x308>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d120      	bne.n	8002468 <UART_SetConfig+0x1d0>
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <UART_SetConfig+0x2fc>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d00f      	beq.n	8002454 <UART_SetConfig+0x1bc>
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d802      	bhi.n	800243e <UART_SetConfig+0x1a6>
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <UART_SetConfig+0x1b0>
 800243c:	e010      	b.n	8002460 <UART_SetConfig+0x1c8>
 800243e:	2b80      	cmp	r3, #128	; 0x80
 8002440:	d005      	beq.n	800244e <UART_SetConfig+0x1b6>
 8002442:	2bc0      	cmp	r3, #192	; 0xc0
 8002444:	d009      	beq.n	800245a <UART_SetConfig+0x1c2>
 8002446:	e00b      	b.n	8002460 <UART_SetConfig+0x1c8>
 8002448:	2300      	movs	r3, #0
 800244a:	77fb      	strb	r3, [r7, #31]
 800244c:	e0cb      	b.n	80025e6 <UART_SetConfig+0x34e>
 800244e:	2302      	movs	r3, #2
 8002450:	77fb      	strb	r3, [r7, #31]
 8002452:	e0c8      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002454:	2304      	movs	r3, #4
 8002456:	77fb      	strb	r3, [r7, #31]
 8002458:	e0c5      	b.n	80025e6 <UART_SetConfig+0x34e>
 800245a:	2308      	movs	r3, #8
 800245c:	77fb      	strb	r3, [r7, #31]
 800245e:	e0c2      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002460:	2310      	movs	r3, #16
 8002462:	77fb      	strb	r3, [r7, #31]
 8002464:	bf00      	nop
 8002466:	e0be      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <UART_SetConfig+0x30c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d124      	bne.n	80024bc <UART_SetConfig+0x224>
 8002472:	4b48      	ldr	r3, [pc, #288]	; (8002594 <UART_SetConfig+0x2fc>)
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002480:	d012      	beq.n	80024a8 <UART_SetConfig+0x210>
 8002482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002486:	d802      	bhi.n	800248e <UART_SetConfig+0x1f6>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <UART_SetConfig+0x204>
 800248c:	e012      	b.n	80024b4 <UART_SetConfig+0x21c>
 800248e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002492:	d006      	beq.n	80024a2 <UART_SetConfig+0x20a>
 8002494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002498:	d009      	beq.n	80024ae <UART_SetConfig+0x216>
 800249a:	e00b      	b.n	80024b4 <UART_SetConfig+0x21c>
 800249c:	2300      	movs	r3, #0
 800249e:	77fb      	strb	r3, [r7, #31]
 80024a0:	e0a1      	b.n	80025e6 <UART_SetConfig+0x34e>
 80024a2:	2302      	movs	r3, #2
 80024a4:	77fb      	strb	r3, [r7, #31]
 80024a6:	e09e      	b.n	80025e6 <UART_SetConfig+0x34e>
 80024a8:	2304      	movs	r3, #4
 80024aa:	77fb      	strb	r3, [r7, #31]
 80024ac:	e09b      	b.n	80025e6 <UART_SetConfig+0x34e>
 80024ae:	2308      	movs	r3, #8
 80024b0:	77fb      	strb	r3, [r7, #31]
 80024b2:	e098      	b.n	80025e6 <UART_SetConfig+0x34e>
 80024b4:	2310      	movs	r3, #16
 80024b6:	77fb      	strb	r3, [r7, #31]
 80024b8:	bf00      	nop
 80024ba:	e094      	b.n	80025e6 <UART_SetConfig+0x34e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a39      	ldr	r2, [pc, #228]	; (80025a8 <UART_SetConfig+0x310>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d124      	bne.n	8002510 <UART_SetConfig+0x278>
 80024c6:	4b33      	ldr	r3, [pc, #204]	; (8002594 <UART_SetConfig+0x2fc>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d4:	d012      	beq.n	80024fc <UART_SetConfig+0x264>
 80024d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024da:	d802      	bhi.n	80024e2 <UART_SetConfig+0x24a>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <UART_SetConfig+0x258>
 80024e0:	e012      	b.n	8002508 <UART_SetConfig+0x270>
 80024e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024e6:	d006      	beq.n	80024f6 <UART_SetConfig+0x25e>
 80024e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80024ec:	d009      	beq.n	8002502 <UART_SetConfig+0x26a>
 80024ee:	e00b      	b.n	8002508 <UART_SetConfig+0x270>
 80024f0:	2301      	movs	r3, #1
 80024f2:	77fb      	strb	r3, [r7, #31]
 80024f4:	e077      	b.n	80025e6 <UART_SetConfig+0x34e>
 80024f6:	2302      	movs	r3, #2
 80024f8:	77fb      	strb	r3, [r7, #31]
 80024fa:	e074      	b.n	80025e6 <UART_SetConfig+0x34e>
 80024fc:	2304      	movs	r3, #4
 80024fe:	77fb      	strb	r3, [r7, #31]
 8002500:	e071      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002502:	2308      	movs	r3, #8
 8002504:	77fb      	strb	r3, [r7, #31]
 8002506:	e06e      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002508:	2310      	movs	r3, #16
 800250a:	77fb      	strb	r3, [r7, #31]
 800250c:	bf00      	nop
 800250e:	e06a      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a25      	ldr	r2, [pc, #148]	; (80025ac <UART_SetConfig+0x314>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d124      	bne.n	8002564 <UART_SetConfig+0x2cc>
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <UART_SetConfig+0x2fc>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002520:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002528:	d012      	beq.n	8002550 <UART_SetConfig+0x2b8>
 800252a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252e:	d802      	bhi.n	8002536 <UART_SetConfig+0x29e>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <UART_SetConfig+0x2ac>
 8002534:	e012      	b.n	800255c <UART_SetConfig+0x2c4>
 8002536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253a:	d006      	beq.n	800254a <UART_SetConfig+0x2b2>
 800253c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002540:	d009      	beq.n	8002556 <UART_SetConfig+0x2be>
 8002542:	e00b      	b.n	800255c <UART_SetConfig+0x2c4>
 8002544:	2300      	movs	r3, #0
 8002546:	77fb      	strb	r3, [r7, #31]
 8002548:	e04d      	b.n	80025e6 <UART_SetConfig+0x34e>
 800254a:	2302      	movs	r3, #2
 800254c:	77fb      	strb	r3, [r7, #31]
 800254e:	e04a      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002550:	2304      	movs	r3, #4
 8002552:	77fb      	strb	r3, [r7, #31]
 8002554:	e047      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002556:	2308      	movs	r3, #8
 8002558:	77fb      	strb	r3, [r7, #31]
 800255a:	e044      	b.n	80025e6 <UART_SetConfig+0x34e>
 800255c:	2310      	movs	r3, #16
 800255e:	77fb      	strb	r3, [r7, #31]
 8002560:	bf00      	nop
 8002562:	e040      	b.n	80025e6 <UART_SetConfig+0x34e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <UART_SetConfig+0x318>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d139      	bne.n	80025e2 <UART_SetConfig+0x34a>
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <UART_SetConfig+0x2fc>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800257c:	d027      	beq.n	80025ce <UART_SetConfig+0x336>
 800257e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002582:	d817      	bhi.n	80025b4 <UART_SetConfig+0x31c>
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01c      	beq.n	80025c2 <UART_SetConfig+0x32a>
 8002588:	e027      	b.n	80025da <UART_SetConfig+0x342>
 800258a:	bf00      	nop
 800258c:	efff69f3 	.word	0xefff69f3
 8002590:	40011000 	.word	0x40011000
 8002594:	40023800 	.word	0x40023800
 8002598:	40004400 	.word	0x40004400
 800259c:	40004800 	.word	0x40004800
 80025a0:	40004c00 	.word	0x40004c00
 80025a4:	40005000 	.word	0x40005000
 80025a8:	40011400 	.word	0x40011400
 80025ac:	40007800 	.word	0x40007800
 80025b0:	40007c00 	.word	0x40007c00
 80025b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b8:	d006      	beq.n	80025c8 <UART_SetConfig+0x330>
 80025ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80025be:	d009      	beq.n	80025d4 <UART_SetConfig+0x33c>
 80025c0:	e00b      	b.n	80025da <UART_SetConfig+0x342>
 80025c2:	2300      	movs	r3, #0
 80025c4:	77fb      	strb	r3, [r7, #31]
 80025c6:	e00e      	b.n	80025e6 <UART_SetConfig+0x34e>
 80025c8:	2302      	movs	r3, #2
 80025ca:	77fb      	strb	r3, [r7, #31]
 80025cc:	e00b      	b.n	80025e6 <UART_SetConfig+0x34e>
 80025ce:	2304      	movs	r3, #4
 80025d0:	77fb      	strb	r3, [r7, #31]
 80025d2:	e008      	b.n	80025e6 <UART_SetConfig+0x34e>
 80025d4:	2308      	movs	r3, #8
 80025d6:	77fb      	strb	r3, [r7, #31]
 80025d8:	e005      	b.n	80025e6 <UART_SetConfig+0x34e>
 80025da:	2310      	movs	r3, #16
 80025dc:	77fb      	strb	r3, [r7, #31]
 80025de:	bf00      	nop
 80025e0:	e001      	b.n	80025e6 <UART_SetConfig+0x34e>
 80025e2:	2310      	movs	r3, #16
 80025e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ee:	d17f      	bne.n	80026f0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80025f0:	7ffb      	ldrb	r3, [r7, #31]
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d85c      	bhi.n	80026b0 <UART_SetConfig+0x418>
 80025f6:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <UART_SetConfig+0x364>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	08002621 	.word	0x08002621
 8002600:	08002641 	.word	0x08002641
 8002604:	08002661 	.word	0x08002661
 8002608:	080026b1 	.word	0x080026b1
 800260c:	08002679 	.word	0x08002679
 8002610:	080026b1 	.word	0x080026b1
 8002614:	080026b1 	.word	0x080026b1
 8002618:	080026b1 	.word	0x080026b1
 800261c:	08002699 	.word	0x08002699
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002620:	f7ff fc66 	bl	8001ef0 <HAL_RCC_GetPCLK1Freq>
 8002624:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	005a      	lsls	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	b29b      	uxth	r3, r3
 800263c:	61bb      	str	r3, [r7, #24]
        break;
 800263e:	e03a      	b.n	80026b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002640:	f7ff fc6a 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8002644:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	005a      	lsls	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	441a      	add	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	b29b      	uxth	r3, r3
 800265c:	61bb      	str	r3, [r7, #24]
        break;
 800265e:	e02a      	b.n	80026b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	085a      	lsrs	r2, r3, #1
 8002666:	4b5f      	ldr	r3, [pc, #380]	; (80027e4 <UART_SetConfig+0x54c>)
 8002668:	4413      	add	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6852      	ldr	r2, [r2, #4]
 800266e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	61bb      	str	r3, [r7, #24]
        break;
 8002676:	e01e      	b.n	80026b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002678:	f7ff fb7c 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 800267c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	005a      	lsls	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	085b      	lsrs	r3, r3, #1
 8002688:	441a      	add	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	b29b      	uxth	r3, r3
 8002694:	61bb      	str	r3, [r7, #24]
        break;
 8002696:	e00e      	b.n	80026b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	61bb      	str	r3, [r7, #24]
        break;
 80026ae:	e002      	b.n	80026b6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	75fb      	strb	r3, [r7, #23]
        break;
 80026b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	2b0f      	cmp	r3, #15
 80026ba:	d916      	bls.n	80026ea <UART_SetConfig+0x452>
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c2:	d212      	bcs.n	80026ea <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f023 030f 	bic.w	r3, r3, #15
 80026cc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	b29a      	uxth	r2, r3
 80026da:	897b      	ldrh	r3, [r7, #10]
 80026dc:	4313      	orrs	r3, r2
 80026de:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	897a      	ldrh	r2, [r7, #10]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	e070      	b.n	80027cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
 80026ee:	e06d      	b.n	80027cc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80026f0:	7ffb      	ldrb	r3, [r7, #31]
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d859      	bhi.n	80027aa <UART_SetConfig+0x512>
 80026f6:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <UART_SetConfig+0x464>)
 80026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fc:	08002721 	.word	0x08002721
 8002700:	0800273f 	.word	0x0800273f
 8002704:	0800275d 	.word	0x0800275d
 8002708:	080027ab 	.word	0x080027ab
 800270c:	08002775 	.word	0x08002775
 8002710:	080027ab 	.word	0x080027ab
 8002714:	080027ab 	.word	0x080027ab
 8002718:	080027ab 	.word	0x080027ab
 800271c:	08002793 	.word	0x08002793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002720:	f7ff fbe6 	bl	8001ef0 <HAL_RCC_GetPCLK1Freq>
 8002724:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	085a      	lsrs	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	441a      	add	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	fbb2 f3f3 	udiv	r3, r2, r3
 8002738:	b29b      	uxth	r3, r3
 800273a:	61bb      	str	r3, [r7, #24]
        break;
 800273c:	e038      	b.n	80027b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800273e:	f7ff fbeb 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8002742:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	085a      	lsrs	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	441a      	add	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	b29b      	uxth	r3, r3
 8002758:	61bb      	str	r3, [r7, #24]
        break;
 800275a:	e029      	b.n	80027b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	085a      	lsrs	r2, r3, #1
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <UART_SetConfig+0x550>)
 8002764:	4413      	add	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6852      	ldr	r2, [r2, #4]
 800276a:	fbb3 f3f2 	udiv	r3, r3, r2
 800276e:	b29b      	uxth	r3, r3
 8002770:	61bb      	str	r3, [r7, #24]
        break;
 8002772:	e01d      	b.n	80027b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002774:	f7ff fafe 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8002778:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	085a      	lsrs	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	441a      	add	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	b29b      	uxth	r3, r3
 800278e:	61bb      	str	r3, [r7, #24]
        break;
 8002790:	e00e      	b.n	80027b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	61bb      	str	r3, [r7, #24]
        break;
 80027a8:	e002      	b.n	80027b0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
        break;
 80027ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	d908      	bls.n	80027c8 <UART_SetConfig+0x530>
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d204      	bcs.n	80027c8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	e001      	b.n	80027cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	01e84800 	.word	0x01e84800
 80027e8:	00f42400 	.word	0x00f42400

080027ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01a      	beq.n	8002902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ea:	d10a      	bne.n	8002902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]
  }
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af02      	add	r7, sp, #8
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800293e:	f7fe fb71 	bl	8001024 <HAL_GetTick>
 8002942:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b08      	cmp	r3, #8
 8002950:	d10e      	bne.n	8002970 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002952:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f82a 	bl	80029ba <UART_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e020      	b.n	80029b2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d10e      	bne.n	800299c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800297e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f814 	bl	80029ba <UART_WaitOnFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e00a      	b.n	80029b2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ca:	e05d      	b.n	8002a88 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d059      	beq.n	8002a88 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d4:	f7fe fb26 	bl	8001024 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d302      	bcc.n	80029ea <UART_WaitOnFlagUntilTimeout+0x30>
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d11b      	bne.n	8002a22 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e042      	b.n	8002aa8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d02b      	beq.n	8002a88 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a3e:	d123      	bne.n	8002a88 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a48:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a58:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e00f      	b.n	8002aa8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	4013      	ands	r3, r2
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	bf0c      	ite	eq
 8002a98:	2301      	moveq	r3, #1
 8002a9a:	2300      	movne	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d092      	beq.n	80029cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <__sflush_r>:
 8002ab0:	898a      	ldrh	r2, [r1, #12]
 8002ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ab6:	4605      	mov	r5, r0
 8002ab8:	0710      	lsls	r0, r2, #28
 8002aba:	460c      	mov	r4, r1
 8002abc:	d458      	bmi.n	8002b70 <__sflush_r+0xc0>
 8002abe:	684b      	ldr	r3, [r1, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	dc05      	bgt.n	8002ad0 <__sflush_r+0x20>
 8002ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	dc02      	bgt.n	8002ad0 <__sflush_r+0x20>
 8002aca:	2000      	movs	r0, #0
 8002acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ad2:	2e00      	cmp	r6, #0
 8002ad4:	d0f9      	beq.n	8002aca <__sflush_r+0x1a>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002adc:	682f      	ldr	r7, [r5, #0]
 8002ade:	6a21      	ldr	r1, [r4, #32]
 8002ae0:	602b      	str	r3, [r5, #0]
 8002ae2:	d032      	beq.n	8002b4a <__sflush_r+0x9a>
 8002ae4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ae6:	89a3      	ldrh	r3, [r4, #12]
 8002ae8:	075a      	lsls	r2, r3, #29
 8002aea:	d505      	bpl.n	8002af8 <__sflush_r+0x48>
 8002aec:	6863      	ldr	r3, [r4, #4]
 8002aee:	1ac0      	subs	r0, r0, r3
 8002af0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002af2:	b10b      	cbz	r3, 8002af8 <__sflush_r+0x48>
 8002af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002af6:	1ac0      	subs	r0, r0, r3
 8002af8:	2300      	movs	r3, #0
 8002afa:	4602      	mov	r2, r0
 8002afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002afe:	6a21      	ldr	r1, [r4, #32]
 8002b00:	4628      	mov	r0, r5
 8002b02:	47b0      	blx	r6
 8002b04:	1c43      	adds	r3, r0, #1
 8002b06:	89a3      	ldrh	r3, [r4, #12]
 8002b08:	d106      	bne.n	8002b18 <__sflush_r+0x68>
 8002b0a:	6829      	ldr	r1, [r5, #0]
 8002b0c:	291d      	cmp	r1, #29
 8002b0e:	d848      	bhi.n	8002ba2 <__sflush_r+0xf2>
 8002b10:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <__sflush_r+0x108>)
 8002b12:	40ca      	lsrs	r2, r1
 8002b14:	07d6      	lsls	r6, r2, #31
 8002b16:	d544      	bpl.n	8002ba2 <__sflush_r+0xf2>
 8002b18:	2200      	movs	r2, #0
 8002b1a:	6062      	str	r2, [r4, #4]
 8002b1c:	04d9      	lsls	r1, r3, #19
 8002b1e:	6922      	ldr	r2, [r4, #16]
 8002b20:	6022      	str	r2, [r4, #0]
 8002b22:	d504      	bpl.n	8002b2e <__sflush_r+0x7e>
 8002b24:	1c42      	adds	r2, r0, #1
 8002b26:	d101      	bne.n	8002b2c <__sflush_r+0x7c>
 8002b28:	682b      	ldr	r3, [r5, #0]
 8002b2a:	b903      	cbnz	r3, 8002b2e <__sflush_r+0x7e>
 8002b2c:	6560      	str	r0, [r4, #84]	; 0x54
 8002b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b30:	602f      	str	r7, [r5, #0]
 8002b32:	2900      	cmp	r1, #0
 8002b34:	d0c9      	beq.n	8002aca <__sflush_r+0x1a>
 8002b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b3a:	4299      	cmp	r1, r3
 8002b3c:	d002      	beq.n	8002b44 <__sflush_r+0x94>
 8002b3e:	4628      	mov	r0, r5
 8002b40:	f000 f96e 	bl	8002e20 <_free_r>
 8002b44:	2000      	movs	r0, #0
 8002b46:	6360      	str	r0, [r4, #52]	; 0x34
 8002b48:	e7c0      	b.n	8002acc <__sflush_r+0x1c>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	47b0      	blx	r6
 8002b50:	1c41      	adds	r1, r0, #1
 8002b52:	d1c8      	bne.n	8002ae6 <__sflush_r+0x36>
 8002b54:	682b      	ldr	r3, [r5, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0c5      	beq.n	8002ae6 <__sflush_r+0x36>
 8002b5a:	2b1d      	cmp	r3, #29
 8002b5c:	d001      	beq.n	8002b62 <__sflush_r+0xb2>
 8002b5e:	2b16      	cmp	r3, #22
 8002b60:	d101      	bne.n	8002b66 <__sflush_r+0xb6>
 8002b62:	602f      	str	r7, [r5, #0]
 8002b64:	e7b1      	b.n	8002aca <__sflush_r+0x1a>
 8002b66:	89a3      	ldrh	r3, [r4, #12]
 8002b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b6c:	81a3      	strh	r3, [r4, #12]
 8002b6e:	e7ad      	b.n	8002acc <__sflush_r+0x1c>
 8002b70:	690f      	ldr	r7, [r1, #16]
 8002b72:	2f00      	cmp	r7, #0
 8002b74:	d0a9      	beq.n	8002aca <__sflush_r+0x1a>
 8002b76:	0793      	lsls	r3, r2, #30
 8002b78:	680e      	ldr	r6, [r1, #0]
 8002b7a:	bf08      	it	eq
 8002b7c:	694b      	ldreq	r3, [r1, #20]
 8002b7e:	600f      	str	r7, [r1, #0]
 8002b80:	bf18      	it	ne
 8002b82:	2300      	movne	r3, #0
 8002b84:	eba6 0807 	sub.w	r8, r6, r7
 8002b88:	608b      	str	r3, [r1, #8]
 8002b8a:	f1b8 0f00 	cmp.w	r8, #0
 8002b8e:	dd9c      	ble.n	8002aca <__sflush_r+0x1a>
 8002b90:	4643      	mov	r3, r8
 8002b92:	463a      	mov	r2, r7
 8002b94:	6a21      	ldr	r1, [r4, #32]
 8002b96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b98:	4628      	mov	r0, r5
 8002b9a:	47b0      	blx	r6
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	dc06      	bgt.n	8002bae <__sflush_r+0xfe>
 8002ba0:	89a3      	ldrh	r3, [r4, #12]
 8002ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba6:	81a3      	strh	r3, [r4, #12]
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	e78e      	b.n	8002acc <__sflush_r+0x1c>
 8002bae:	4407      	add	r7, r0
 8002bb0:	eba8 0800 	sub.w	r8, r8, r0
 8002bb4:	e7e9      	b.n	8002b8a <__sflush_r+0xda>
 8002bb6:	bf00      	nop
 8002bb8:	20400001 	.word	0x20400001

08002bbc <_fflush_r>:
 8002bbc:	b538      	push	{r3, r4, r5, lr}
 8002bbe:	690b      	ldr	r3, [r1, #16]
 8002bc0:	4605      	mov	r5, r0
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	b1db      	cbz	r3, 8002bfe <_fflush_r+0x42>
 8002bc6:	b118      	cbz	r0, 8002bd0 <_fflush_r+0x14>
 8002bc8:	6983      	ldr	r3, [r0, #24]
 8002bca:	b90b      	cbnz	r3, 8002bd0 <_fflush_r+0x14>
 8002bcc:	f000 f872 	bl	8002cb4 <__sinit>
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <_fflush_r+0x48>)
 8002bd2:	429c      	cmp	r4, r3
 8002bd4:	d109      	bne.n	8002bea <_fflush_r+0x2e>
 8002bd6:	686c      	ldr	r4, [r5, #4]
 8002bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bdc:	b17b      	cbz	r3, 8002bfe <_fflush_r+0x42>
 8002bde:	4621      	mov	r1, r4
 8002be0:	4628      	mov	r0, r5
 8002be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002be6:	f7ff bf63 	b.w	8002ab0 <__sflush_r>
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <_fflush_r+0x4c>)
 8002bec:	429c      	cmp	r4, r3
 8002bee:	d101      	bne.n	8002bf4 <_fflush_r+0x38>
 8002bf0:	68ac      	ldr	r4, [r5, #8]
 8002bf2:	e7f1      	b.n	8002bd8 <_fflush_r+0x1c>
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <_fflush_r+0x50>)
 8002bf6:	429c      	cmp	r4, r3
 8002bf8:	bf08      	it	eq
 8002bfa:	68ec      	ldreq	r4, [r5, #12]
 8002bfc:	e7ec      	b.n	8002bd8 <_fflush_r+0x1c>
 8002bfe:	2000      	movs	r0, #0
 8002c00:	bd38      	pop	{r3, r4, r5, pc}
 8002c02:	bf00      	nop
 8002c04:	08003ba4 	.word	0x08003ba4
 8002c08:	08003bc4 	.word	0x08003bc4
 8002c0c:	08003b84 	.word	0x08003b84

08002c10 <fflush>:
 8002c10:	4601      	mov	r1, r0
 8002c12:	b920      	cbnz	r0, 8002c1e <fflush+0xe>
 8002c14:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <fflush+0x18>)
 8002c16:	4905      	ldr	r1, [pc, #20]	; (8002c2c <fflush+0x1c>)
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	f000 b8b7 	b.w	8002d8c <_fwalk_reent>
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <fflush+0x20>)
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	f7ff bfcb 	b.w	8002bbc <_fflush_r>
 8002c26:	bf00      	nop
 8002c28:	08003be4 	.word	0x08003be4
 8002c2c:	08002bbd 	.word	0x08002bbd
 8002c30:	20000010 	.word	0x20000010

08002c34 <std>:
 8002c34:	2300      	movs	r3, #0
 8002c36:	b510      	push	{r4, lr}
 8002c38:	4604      	mov	r4, r0
 8002c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8002c3e:	6083      	str	r3, [r0, #8]
 8002c40:	8181      	strh	r1, [r0, #12]
 8002c42:	6643      	str	r3, [r0, #100]	; 0x64
 8002c44:	81c2      	strh	r2, [r0, #14]
 8002c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c4a:	6183      	str	r3, [r0, #24]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	2208      	movs	r2, #8
 8002c50:	305c      	adds	r0, #92	; 0x5c
 8002c52:	f000 f8dd 	bl	8002e10 <memset>
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <std+0x38>)
 8002c58:	6263      	str	r3, [r4, #36]	; 0x24
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <std+0x3c>)
 8002c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <std+0x40>)
 8002c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <std+0x44>)
 8002c64:	6224      	str	r4, [r4, #32]
 8002c66:	6323      	str	r3, [r4, #48]	; 0x30
 8002c68:	bd10      	pop	{r4, pc}
 8002c6a:	bf00      	nop
 8002c6c:	080030f1 	.word	0x080030f1
 8002c70:	08003113 	.word	0x08003113
 8002c74:	0800314b 	.word	0x0800314b
 8002c78:	0800316f 	.word	0x0800316f

08002c7c <_cleanup_r>:
 8002c7c:	4901      	ldr	r1, [pc, #4]	; (8002c84 <_cleanup_r+0x8>)
 8002c7e:	f000 b885 	b.w	8002d8c <_fwalk_reent>
 8002c82:	bf00      	nop
 8002c84:	08002bbd 	.word	0x08002bbd

08002c88 <__sfmoreglue>:
 8002c88:	b570      	push	{r4, r5, r6, lr}
 8002c8a:	1e4a      	subs	r2, r1, #1
 8002c8c:	2568      	movs	r5, #104	; 0x68
 8002c8e:	4355      	muls	r5, r2
 8002c90:	460e      	mov	r6, r1
 8002c92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c96:	f000 f911 	bl	8002ebc <_malloc_r>
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	b140      	cbz	r0, 8002cb0 <__sfmoreglue+0x28>
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	e9c0 1600 	strd	r1, r6, [r0]
 8002ca4:	300c      	adds	r0, #12
 8002ca6:	60a0      	str	r0, [r4, #8]
 8002ca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002cac:	f000 f8b0 	bl	8002e10 <memset>
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	bd70      	pop	{r4, r5, r6, pc}

08002cb4 <__sinit>:
 8002cb4:	6983      	ldr	r3, [r0, #24]
 8002cb6:	b510      	push	{r4, lr}
 8002cb8:	4604      	mov	r4, r0
 8002cba:	bb33      	cbnz	r3, 8002d0a <__sinit+0x56>
 8002cbc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002cc0:	6503      	str	r3, [r0, #80]	; 0x50
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <__sinit+0x58>)
 8002cc4:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <__sinit+0x5c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6282      	str	r2, [r0, #40]	; 0x28
 8002cca:	4298      	cmp	r0, r3
 8002ccc:	bf04      	itt	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	6183      	streq	r3, [r0, #24]
 8002cd2:	f000 f81f 	bl	8002d14 <__sfp>
 8002cd6:	6060      	str	r0, [r4, #4]
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f000 f81b 	bl	8002d14 <__sfp>
 8002cde:	60a0      	str	r0, [r4, #8]
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f000 f817 	bl	8002d14 <__sfp>
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	60e0      	str	r0, [r4, #12]
 8002cea:	2104      	movs	r1, #4
 8002cec:	6860      	ldr	r0, [r4, #4]
 8002cee:	f7ff ffa1 	bl	8002c34 <std>
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	2109      	movs	r1, #9
 8002cf6:	68a0      	ldr	r0, [r4, #8]
 8002cf8:	f7ff ff9c 	bl	8002c34 <std>
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	2112      	movs	r1, #18
 8002d00:	68e0      	ldr	r0, [r4, #12]
 8002d02:	f7ff ff97 	bl	8002c34 <std>
 8002d06:	2301      	movs	r3, #1
 8002d08:	61a3      	str	r3, [r4, #24]
 8002d0a:	bd10      	pop	{r4, pc}
 8002d0c:	08003be4 	.word	0x08003be4
 8002d10:	08002c7d 	.word	0x08002c7d

08002d14 <__sfp>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <__sfp+0x70>)
 8002d18:	681e      	ldr	r6, [r3, #0]
 8002d1a:	69b3      	ldr	r3, [r6, #24]
 8002d1c:	4607      	mov	r7, r0
 8002d1e:	b913      	cbnz	r3, 8002d26 <__sfp+0x12>
 8002d20:	4630      	mov	r0, r6
 8002d22:	f7ff ffc7 	bl	8002cb4 <__sinit>
 8002d26:	3648      	adds	r6, #72	; 0x48
 8002d28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	d503      	bpl.n	8002d38 <__sfp+0x24>
 8002d30:	6833      	ldr	r3, [r6, #0]
 8002d32:	b133      	cbz	r3, 8002d42 <__sfp+0x2e>
 8002d34:	6836      	ldr	r6, [r6, #0]
 8002d36:	e7f7      	b.n	8002d28 <__sfp+0x14>
 8002d38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d3c:	b16d      	cbz	r5, 8002d5a <__sfp+0x46>
 8002d3e:	3468      	adds	r4, #104	; 0x68
 8002d40:	e7f4      	b.n	8002d2c <__sfp+0x18>
 8002d42:	2104      	movs	r1, #4
 8002d44:	4638      	mov	r0, r7
 8002d46:	f7ff ff9f 	bl	8002c88 <__sfmoreglue>
 8002d4a:	6030      	str	r0, [r6, #0]
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d1f1      	bne.n	8002d34 <__sfp+0x20>
 8002d50:	230c      	movs	r3, #12
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4604      	mov	r4, r0
 8002d56:	4620      	mov	r0, r4
 8002d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <__sfp+0x74>)
 8002d5c:	6665      	str	r5, [r4, #100]	; 0x64
 8002d5e:	e9c4 5500 	strd	r5, r5, [r4]
 8002d62:	60a5      	str	r5, [r4, #8]
 8002d64:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002d68:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	4629      	mov	r1, r5
 8002d70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d74:	f000 f84c 	bl	8002e10 <memset>
 8002d78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d80:	e7e9      	b.n	8002d56 <__sfp+0x42>
 8002d82:	bf00      	nop
 8002d84:	08003be4 	.word	0x08003be4
 8002d88:	ffff0001 	.word	0xffff0001

08002d8c <_fwalk_reent>:
 8002d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d90:	4680      	mov	r8, r0
 8002d92:	4689      	mov	r9, r1
 8002d94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d98:	2600      	movs	r6, #0
 8002d9a:	b914      	cbnz	r4, 8002da2 <_fwalk_reent+0x16>
 8002d9c:	4630      	mov	r0, r6
 8002d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002da2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002da6:	3f01      	subs	r7, #1
 8002da8:	d501      	bpl.n	8002dae <_fwalk_reent+0x22>
 8002daa:	6824      	ldr	r4, [r4, #0]
 8002dac:	e7f5      	b.n	8002d9a <_fwalk_reent+0xe>
 8002dae:	89ab      	ldrh	r3, [r5, #12]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d907      	bls.n	8002dc4 <_fwalk_reent+0x38>
 8002db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002db8:	3301      	adds	r3, #1
 8002dba:	d003      	beq.n	8002dc4 <_fwalk_reent+0x38>
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	4640      	mov	r0, r8
 8002dc0:	47c8      	blx	r9
 8002dc2:	4306      	orrs	r6, r0
 8002dc4:	3568      	adds	r5, #104	; 0x68
 8002dc6:	e7ee      	b.n	8002da6 <_fwalk_reent+0x1a>

08002dc8 <__libc_init_array>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	4e0d      	ldr	r6, [pc, #52]	; (8002e00 <__libc_init_array+0x38>)
 8002dcc:	4c0d      	ldr	r4, [pc, #52]	; (8002e04 <__libc_init_array+0x3c>)
 8002dce:	1ba4      	subs	r4, r4, r6
 8002dd0:	10a4      	asrs	r4, r4, #2
 8002dd2:	2500      	movs	r5, #0
 8002dd4:	42a5      	cmp	r5, r4
 8002dd6:	d109      	bne.n	8002dec <__libc_init_array+0x24>
 8002dd8:	4e0b      	ldr	r6, [pc, #44]	; (8002e08 <__libc_init_array+0x40>)
 8002dda:	4c0c      	ldr	r4, [pc, #48]	; (8002e0c <__libc_init_array+0x44>)
 8002ddc:	f000 fe58 	bl	8003a90 <_init>
 8002de0:	1ba4      	subs	r4, r4, r6
 8002de2:	10a4      	asrs	r4, r4, #2
 8002de4:	2500      	movs	r5, #0
 8002de6:	42a5      	cmp	r5, r4
 8002de8:	d105      	bne.n	8002df6 <__libc_init_array+0x2e>
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002df0:	4798      	blx	r3
 8002df2:	3501      	adds	r5, #1
 8002df4:	e7ee      	b.n	8002dd4 <__libc_init_array+0xc>
 8002df6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dfa:	4798      	blx	r3
 8002dfc:	3501      	adds	r5, #1
 8002dfe:	e7f2      	b.n	8002de6 <__libc_init_array+0x1e>
 8002e00:	08003c24 	.word	0x08003c24
 8002e04:	08003c24 	.word	0x08003c24
 8002e08:	08003c24 	.word	0x08003c24
 8002e0c:	08003c28 	.word	0x08003c28

08002e10 <memset>:
 8002e10:	4402      	add	r2, r0
 8002e12:	4603      	mov	r3, r0
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d100      	bne.n	8002e1a <memset+0xa>
 8002e18:	4770      	bx	lr
 8002e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e1e:	e7f9      	b.n	8002e14 <memset+0x4>

08002e20 <_free_r>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	4605      	mov	r5, r0
 8002e24:	2900      	cmp	r1, #0
 8002e26:	d045      	beq.n	8002eb4 <_free_r+0x94>
 8002e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e2c:	1f0c      	subs	r4, r1, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bfb8      	it	lt
 8002e32:	18e4      	addlt	r4, r4, r3
 8002e34:	f000 fb00 	bl	8003438 <__malloc_lock>
 8002e38:	4a1f      	ldr	r2, [pc, #124]	; (8002eb8 <_free_r+0x98>)
 8002e3a:	6813      	ldr	r3, [r2, #0]
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	b933      	cbnz	r3, 8002e4e <_free_r+0x2e>
 8002e40:	6063      	str	r3, [r4, #4]
 8002e42:	6014      	str	r4, [r2, #0]
 8002e44:	4628      	mov	r0, r5
 8002e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e4a:	f000 baf6 	b.w	800343a <__malloc_unlock>
 8002e4e:	42a3      	cmp	r3, r4
 8002e50:	d90c      	bls.n	8002e6c <_free_r+0x4c>
 8002e52:	6821      	ldr	r1, [r4, #0]
 8002e54:	1862      	adds	r2, r4, r1
 8002e56:	4293      	cmp	r3, r2
 8002e58:	bf04      	itt	eq
 8002e5a:	681a      	ldreq	r2, [r3, #0]
 8002e5c:	685b      	ldreq	r3, [r3, #4]
 8002e5e:	6063      	str	r3, [r4, #4]
 8002e60:	bf04      	itt	eq
 8002e62:	1852      	addeq	r2, r2, r1
 8002e64:	6022      	streq	r2, [r4, #0]
 8002e66:	6004      	str	r4, [r0, #0]
 8002e68:	e7ec      	b.n	8002e44 <_free_r+0x24>
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	b10a      	cbz	r2, 8002e74 <_free_r+0x54>
 8002e70:	42a2      	cmp	r2, r4
 8002e72:	d9fa      	bls.n	8002e6a <_free_r+0x4a>
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	1858      	adds	r0, r3, r1
 8002e78:	42a0      	cmp	r0, r4
 8002e7a:	d10b      	bne.n	8002e94 <_free_r+0x74>
 8002e7c:	6820      	ldr	r0, [r4, #0]
 8002e7e:	4401      	add	r1, r0
 8002e80:	1858      	adds	r0, r3, r1
 8002e82:	4282      	cmp	r2, r0
 8002e84:	6019      	str	r1, [r3, #0]
 8002e86:	d1dd      	bne.n	8002e44 <_free_r+0x24>
 8002e88:	6810      	ldr	r0, [r2, #0]
 8002e8a:	6852      	ldr	r2, [r2, #4]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	4401      	add	r1, r0
 8002e90:	6019      	str	r1, [r3, #0]
 8002e92:	e7d7      	b.n	8002e44 <_free_r+0x24>
 8002e94:	d902      	bls.n	8002e9c <_free_r+0x7c>
 8002e96:	230c      	movs	r3, #12
 8002e98:	602b      	str	r3, [r5, #0]
 8002e9a:	e7d3      	b.n	8002e44 <_free_r+0x24>
 8002e9c:	6820      	ldr	r0, [r4, #0]
 8002e9e:	1821      	adds	r1, r4, r0
 8002ea0:	428a      	cmp	r2, r1
 8002ea2:	bf04      	itt	eq
 8002ea4:	6811      	ldreq	r1, [r2, #0]
 8002ea6:	6852      	ldreq	r2, [r2, #4]
 8002ea8:	6062      	str	r2, [r4, #4]
 8002eaa:	bf04      	itt	eq
 8002eac:	1809      	addeq	r1, r1, r0
 8002eae:	6021      	streq	r1, [r4, #0]
 8002eb0:	605c      	str	r4, [r3, #4]
 8002eb2:	e7c7      	b.n	8002e44 <_free_r+0x24>
 8002eb4:	bd38      	pop	{r3, r4, r5, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200000b4 	.word	0x200000b4

08002ebc <_malloc_r>:
 8002ebc:	b570      	push	{r4, r5, r6, lr}
 8002ebe:	1ccd      	adds	r5, r1, #3
 8002ec0:	f025 0503 	bic.w	r5, r5, #3
 8002ec4:	3508      	adds	r5, #8
 8002ec6:	2d0c      	cmp	r5, #12
 8002ec8:	bf38      	it	cc
 8002eca:	250c      	movcc	r5, #12
 8002ecc:	2d00      	cmp	r5, #0
 8002ece:	4606      	mov	r6, r0
 8002ed0:	db01      	blt.n	8002ed6 <_malloc_r+0x1a>
 8002ed2:	42a9      	cmp	r1, r5
 8002ed4:	d903      	bls.n	8002ede <_malloc_r+0x22>
 8002ed6:	230c      	movs	r3, #12
 8002ed8:	6033      	str	r3, [r6, #0]
 8002eda:	2000      	movs	r0, #0
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	f000 faab 	bl	8003438 <__malloc_lock>
 8002ee2:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <_malloc_r+0xac>)
 8002ee4:	6814      	ldr	r4, [r2, #0]
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	b991      	cbnz	r1, 8002f10 <_malloc_r+0x54>
 8002eea:	4c20      	ldr	r4, [pc, #128]	; (8002f6c <_malloc_r+0xb0>)
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	b91b      	cbnz	r3, 8002ef8 <_malloc_r+0x3c>
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	f000 f8ed 	bl	80030d0 <_sbrk_r>
 8002ef6:	6020      	str	r0, [r4, #0]
 8002ef8:	4629      	mov	r1, r5
 8002efa:	4630      	mov	r0, r6
 8002efc:	f000 f8e8 	bl	80030d0 <_sbrk_r>
 8002f00:	1c43      	adds	r3, r0, #1
 8002f02:	d124      	bne.n	8002f4e <_malloc_r+0x92>
 8002f04:	230c      	movs	r3, #12
 8002f06:	6033      	str	r3, [r6, #0]
 8002f08:	4630      	mov	r0, r6
 8002f0a:	f000 fa96 	bl	800343a <__malloc_unlock>
 8002f0e:	e7e4      	b.n	8002eda <_malloc_r+0x1e>
 8002f10:	680b      	ldr	r3, [r1, #0]
 8002f12:	1b5b      	subs	r3, r3, r5
 8002f14:	d418      	bmi.n	8002f48 <_malloc_r+0x8c>
 8002f16:	2b0b      	cmp	r3, #11
 8002f18:	d90f      	bls.n	8002f3a <_malloc_r+0x7e>
 8002f1a:	600b      	str	r3, [r1, #0]
 8002f1c:	50cd      	str	r5, [r1, r3]
 8002f1e:	18cc      	adds	r4, r1, r3
 8002f20:	4630      	mov	r0, r6
 8002f22:	f000 fa8a 	bl	800343a <__malloc_unlock>
 8002f26:	f104 000b 	add.w	r0, r4, #11
 8002f2a:	1d23      	adds	r3, r4, #4
 8002f2c:	f020 0007 	bic.w	r0, r0, #7
 8002f30:	1ac3      	subs	r3, r0, r3
 8002f32:	d0d3      	beq.n	8002edc <_malloc_r+0x20>
 8002f34:	425a      	negs	r2, r3
 8002f36:	50e2      	str	r2, [r4, r3]
 8002f38:	e7d0      	b.n	8002edc <_malloc_r+0x20>
 8002f3a:	428c      	cmp	r4, r1
 8002f3c:	684b      	ldr	r3, [r1, #4]
 8002f3e:	bf16      	itet	ne
 8002f40:	6063      	strne	r3, [r4, #4]
 8002f42:	6013      	streq	r3, [r2, #0]
 8002f44:	460c      	movne	r4, r1
 8002f46:	e7eb      	b.n	8002f20 <_malloc_r+0x64>
 8002f48:	460c      	mov	r4, r1
 8002f4a:	6849      	ldr	r1, [r1, #4]
 8002f4c:	e7cc      	b.n	8002ee8 <_malloc_r+0x2c>
 8002f4e:	1cc4      	adds	r4, r0, #3
 8002f50:	f024 0403 	bic.w	r4, r4, #3
 8002f54:	42a0      	cmp	r0, r4
 8002f56:	d005      	beq.n	8002f64 <_malloc_r+0xa8>
 8002f58:	1a21      	subs	r1, r4, r0
 8002f5a:	4630      	mov	r0, r6
 8002f5c:	f000 f8b8 	bl	80030d0 <_sbrk_r>
 8002f60:	3001      	adds	r0, #1
 8002f62:	d0cf      	beq.n	8002f04 <_malloc_r+0x48>
 8002f64:	6025      	str	r5, [r4, #0]
 8002f66:	e7db      	b.n	8002f20 <_malloc_r+0x64>
 8002f68:	200000b4 	.word	0x200000b4
 8002f6c:	200000b8 	.word	0x200000b8

08002f70 <iprintf>:
 8002f70:	b40f      	push	{r0, r1, r2, r3}
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <iprintf+0x2c>)
 8002f74:	b513      	push	{r0, r1, r4, lr}
 8002f76:	681c      	ldr	r4, [r3, #0]
 8002f78:	b124      	cbz	r4, 8002f84 <iprintf+0x14>
 8002f7a:	69a3      	ldr	r3, [r4, #24]
 8002f7c:	b913      	cbnz	r3, 8002f84 <iprintf+0x14>
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f7ff fe98 	bl	8002cb4 <__sinit>
 8002f84:	ab05      	add	r3, sp, #20
 8002f86:	9a04      	ldr	r2, [sp, #16]
 8002f88:	68a1      	ldr	r1, [r4, #8]
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f000 fa7f 	bl	8003490 <_vfiprintf_r>
 8002f92:	b002      	add	sp, #8
 8002f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f98:	b004      	add	sp, #16
 8002f9a:	4770      	bx	lr
 8002f9c:	20000010 	.word	0x20000010

08002fa0 <_puts_r>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	460e      	mov	r6, r1
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	b118      	cbz	r0, 8002fb0 <_puts_r+0x10>
 8002fa8:	6983      	ldr	r3, [r0, #24]
 8002faa:	b90b      	cbnz	r3, 8002fb0 <_puts_r+0x10>
 8002fac:	f7ff fe82 	bl	8002cb4 <__sinit>
 8002fb0:	69ab      	ldr	r3, [r5, #24]
 8002fb2:	68ac      	ldr	r4, [r5, #8]
 8002fb4:	b913      	cbnz	r3, 8002fbc <_puts_r+0x1c>
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f7ff fe7c 	bl	8002cb4 <__sinit>
 8002fbc:	4b23      	ldr	r3, [pc, #140]	; (800304c <_puts_r+0xac>)
 8002fbe:	429c      	cmp	r4, r3
 8002fc0:	d117      	bne.n	8002ff2 <_puts_r+0x52>
 8002fc2:	686c      	ldr	r4, [r5, #4]
 8002fc4:	89a3      	ldrh	r3, [r4, #12]
 8002fc6:	071b      	lsls	r3, r3, #28
 8002fc8:	d51d      	bpl.n	8003006 <_puts_r+0x66>
 8002fca:	6923      	ldr	r3, [r4, #16]
 8002fcc:	b1db      	cbz	r3, 8003006 <_puts_r+0x66>
 8002fce:	3e01      	subs	r6, #1
 8002fd0:	68a3      	ldr	r3, [r4, #8]
 8002fd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	60a3      	str	r3, [r4, #8]
 8002fda:	b9e9      	cbnz	r1, 8003018 <_puts_r+0x78>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da2e      	bge.n	800303e <_puts_r+0x9e>
 8002fe0:	4622      	mov	r2, r4
 8002fe2:	210a      	movs	r1, #10
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	f000 f8c7 	bl	8003178 <__swbuf_r>
 8002fea:	3001      	adds	r0, #1
 8002fec:	d011      	beq.n	8003012 <_puts_r+0x72>
 8002fee:	200a      	movs	r0, #10
 8002ff0:	e011      	b.n	8003016 <_puts_r+0x76>
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <_puts_r+0xb0>)
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	d101      	bne.n	8002ffc <_puts_r+0x5c>
 8002ff8:	68ac      	ldr	r4, [r5, #8]
 8002ffa:	e7e3      	b.n	8002fc4 <_puts_r+0x24>
 8002ffc:	4b15      	ldr	r3, [pc, #84]	; (8003054 <_puts_r+0xb4>)
 8002ffe:	429c      	cmp	r4, r3
 8003000:	bf08      	it	eq
 8003002:	68ec      	ldreq	r4, [r5, #12]
 8003004:	e7de      	b.n	8002fc4 <_puts_r+0x24>
 8003006:	4621      	mov	r1, r4
 8003008:	4628      	mov	r0, r5
 800300a:	f000 f919 	bl	8003240 <__swsetup_r>
 800300e:	2800      	cmp	r0, #0
 8003010:	d0dd      	beq.n	8002fce <_puts_r+0x2e>
 8003012:	f04f 30ff 	mov.w	r0, #4294967295
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	2b00      	cmp	r3, #0
 800301a:	da04      	bge.n	8003026 <_puts_r+0x86>
 800301c:	69a2      	ldr	r2, [r4, #24]
 800301e:	429a      	cmp	r2, r3
 8003020:	dc06      	bgt.n	8003030 <_puts_r+0x90>
 8003022:	290a      	cmp	r1, #10
 8003024:	d004      	beq.n	8003030 <_puts_r+0x90>
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	6022      	str	r2, [r4, #0]
 800302c:	7019      	strb	r1, [r3, #0]
 800302e:	e7cf      	b.n	8002fd0 <_puts_r+0x30>
 8003030:	4622      	mov	r2, r4
 8003032:	4628      	mov	r0, r5
 8003034:	f000 f8a0 	bl	8003178 <__swbuf_r>
 8003038:	3001      	adds	r0, #1
 800303a:	d1c9      	bne.n	8002fd0 <_puts_r+0x30>
 800303c:	e7e9      	b.n	8003012 <_puts_r+0x72>
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	200a      	movs	r0, #10
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	6022      	str	r2, [r4, #0]
 8003046:	7018      	strb	r0, [r3, #0]
 8003048:	e7e5      	b.n	8003016 <_puts_r+0x76>
 800304a:	bf00      	nop
 800304c:	08003ba4 	.word	0x08003ba4
 8003050:	08003bc4 	.word	0x08003bc4
 8003054:	08003b84 	.word	0x08003b84

08003058 <puts>:
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <puts+0xc>)
 800305a:	4601      	mov	r1, r0
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	f7ff bf9f 	b.w	8002fa0 <_puts_r>
 8003062:	bf00      	nop
 8003064:	20000010 	.word	0x20000010

08003068 <rand>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <rand+0x50>)
 800306c:	681c      	ldr	r4, [r3, #0]
 800306e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003070:	b97b      	cbnz	r3, 8003092 <rand+0x2a>
 8003072:	2018      	movs	r0, #24
 8003074:	f000 f9d8 	bl	8003428 <malloc>
 8003078:	4a10      	ldr	r2, [pc, #64]	; (80030bc <rand+0x54>)
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <rand+0x58>)
 800307c:	63a0      	str	r0, [r4, #56]	; 0x38
 800307e:	e9c0 2300 	strd	r2, r3, [r0]
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <rand+0x5c>)
 8003084:	6083      	str	r3, [r0, #8]
 8003086:	230b      	movs	r3, #11
 8003088:	8183      	strh	r3, [r0, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	2300      	movs	r3, #0
 800308e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003092:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003094:	480c      	ldr	r0, [pc, #48]	; (80030c8 <rand+0x60>)
 8003096:	690a      	ldr	r2, [r1, #16]
 8003098:	694b      	ldr	r3, [r1, #20]
 800309a:	4c0c      	ldr	r4, [pc, #48]	; (80030cc <rand+0x64>)
 800309c:	4350      	muls	r0, r2
 800309e:	fb04 0003 	mla	r0, r4, r3, r0
 80030a2:	fba2 2304 	umull	r2, r3, r2, r4
 80030a6:	4403      	add	r3, r0
 80030a8:	1c54      	adds	r4, r2, #1
 80030aa:	f143 0500 	adc.w	r5, r3, #0
 80030ae:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80030b2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
 80030b8:	20000010 	.word	0x20000010
 80030bc:	abcd330e 	.word	0xabcd330e
 80030c0:	e66d1234 	.word	0xe66d1234
 80030c4:	0005deec 	.word	0x0005deec
 80030c8:	5851f42d 	.word	0x5851f42d
 80030cc:	4c957f2d 	.word	0x4c957f2d

080030d0 <_sbrk_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4c06      	ldr	r4, [pc, #24]	; (80030ec <_sbrk_r+0x1c>)
 80030d4:	2300      	movs	r3, #0
 80030d6:	4605      	mov	r5, r0
 80030d8:	4608      	mov	r0, r1
 80030da:	6023      	str	r3, [r4, #0]
 80030dc:	f000 fcca 	bl	8003a74 <_sbrk>
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	d102      	bne.n	80030ea <_sbrk_r+0x1a>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	b103      	cbz	r3, 80030ea <_sbrk_r+0x1a>
 80030e8:	602b      	str	r3, [r5, #0]
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
 80030ec:	20000144 	.word	0x20000144

080030f0 <__sread>:
 80030f0:	b510      	push	{r4, lr}
 80030f2:	460c      	mov	r4, r1
 80030f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030f8:	f000 fc68 	bl	80039cc <_read_r>
 80030fc:	2800      	cmp	r0, #0
 80030fe:	bfab      	itete	ge
 8003100:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003102:	89a3      	ldrhlt	r3, [r4, #12]
 8003104:	181b      	addge	r3, r3, r0
 8003106:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800310a:	bfac      	ite	ge
 800310c:	6563      	strge	r3, [r4, #84]	; 0x54
 800310e:	81a3      	strhlt	r3, [r4, #12]
 8003110:	bd10      	pop	{r4, pc}

08003112 <__swrite>:
 8003112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003116:	461f      	mov	r7, r3
 8003118:	898b      	ldrh	r3, [r1, #12]
 800311a:	05db      	lsls	r3, r3, #23
 800311c:	4605      	mov	r5, r0
 800311e:	460c      	mov	r4, r1
 8003120:	4616      	mov	r6, r2
 8003122:	d505      	bpl.n	8003130 <__swrite+0x1e>
 8003124:	2302      	movs	r3, #2
 8003126:	2200      	movs	r2, #0
 8003128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800312c:	f000 f906 	bl	800333c <_lseek_r>
 8003130:	89a3      	ldrh	r3, [r4, #12]
 8003132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800313a:	81a3      	strh	r3, [r4, #12]
 800313c:	4632      	mov	r2, r6
 800313e:	463b      	mov	r3, r7
 8003140:	4628      	mov	r0, r5
 8003142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003146:	f000 b869 	b.w	800321c <_write_r>

0800314a <__sseek>:
 800314a:	b510      	push	{r4, lr}
 800314c:	460c      	mov	r4, r1
 800314e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003152:	f000 f8f3 	bl	800333c <_lseek_r>
 8003156:	1c43      	adds	r3, r0, #1
 8003158:	89a3      	ldrh	r3, [r4, #12]
 800315a:	bf15      	itete	ne
 800315c:	6560      	strne	r0, [r4, #84]	; 0x54
 800315e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003162:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003166:	81a3      	strheq	r3, [r4, #12]
 8003168:	bf18      	it	ne
 800316a:	81a3      	strhne	r3, [r4, #12]
 800316c:	bd10      	pop	{r4, pc}

0800316e <__sclose>:
 800316e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003172:	f000 b8d3 	b.w	800331c <_close_r>
	...

08003178 <__swbuf_r>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	460e      	mov	r6, r1
 800317c:	4614      	mov	r4, r2
 800317e:	4605      	mov	r5, r0
 8003180:	b118      	cbz	r0, 800318a <__swbuf_r+0x12>
 8003182:	6983      	ldr	r3, [r0, #24]
 8003184:	b90b      	cbnz	r3, 800318a <__swbuf_r+0x12>
 8003186:	f7ff fd95 	bl	8002cb4 <__sinit>
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <__swbuf_r+0x98>)
 800318c:	429c      	cmp	r4, r3
 800318e:	d12a      	bne.n	80031e6 <__swbuf_r+0x6e>
 8003190:	686c      	ldr	r4, [r5, #4]
 8003192:	69a3      	ldr	r3, [r4, #24]
 8003194:	60a3      	str	r3, [r4, #8]
 8003196:	89a3      	ldrh	r3, [r4, #12]
 8003198:	071a      	lsls	r2, r3, #28
 800319a:	d52e      	bpl.n	80031fa <__swbuf_r+0x82>
 800319c:	6923      	ldr	r3, [r4, #16]
 800319e:	b363      	cbz	r3, 80031fa <__swbuf_r+0x82>
 80031a0:	6923      	ldr	r3, [r4, #16]
 80031a2:	6820      	ldr	r0, [r4, #0]
 80031a4:	1ac0      	subs	r0, r0, r3
 80031a6:	6963      	ldr	r3, [r4, #20]
 80031a8:	b2f6      	uxtb	r6, r6
 80031aa:	4283      	cmp	r3, r0
 80031ac:	4637      	mov	r7, r6
 80031ae:	dc04      	bgt.n	80031ba <__swbuf_r+0x42>
 80031b0:	4621      	mov	r1, r4
 80031b2:	4628      	mov	r0, r5
 80031b4:	f7ff fd02 	bl	8002bbc <_fflush_r>
 80031b8:	bb28      	cbnz	r0, 8003206 <__swbuf_r+0x8e>
 80031ba:	68a3      	ldr	r3, [r4, #8]
 80031bc:	3b01      	subs	r3, #1
 80031be:	60a3      	str	r3, [r4, #8]
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	6022      	str	r2, [r4, #0]
 80031c6:	701e      	strb	r6, [r3, #0]
 80031c8:	6963      	ldr	r3, [r4, #20]
 80031ca:	3001      	adds	r0, #1
 80031cc:	4283      	cmp	r3, r0
 80031ce:	d004      	beq.n	80031da <__swbuf_r+0x62>
 80031d0:	89a3      	ldrh	r3, [r4, #12]
 80031d2:	07db      	lsls	r3, r3, #31
 80031d4:	d519      	bpl.n	800320a <__swbuf_r+0x92>
 80031d6:	2e0a      	cmp	r6, #10
 80031d8:	d117      	bne.n	800320a <__swbuf_r+0x92>
 80031da:	4621      	mov	r1, r4
 80031dc:	4628      	mov	r0, r5
 80031de:	f7ff fced 	bl	8002bbc <_fflush_r>
 80031e2:	b190      	cbz	r0, 800320a <__swbuf_r+0x92>
 80031e4:	e00f      	b.n	8003206 <__swbuf_r+0x8e>
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <__swbuf_r+0x9c>)
 80031e8:	429c      	cmp	r4, r3
 80031ea:	d101      	bne.n	80031f0 <__swbuf_r+0x78>
 80031ec:	68ac      	ldr	r4, [r5, #8]
 80031ee:	e7d0      	b.n	8003192 <__swbuf_r+0x1a>
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <__swbuf_r+0xa0>)
 80031f2:	429c      	cmp	r4, r3
 80031f4:	bf08      	it	eq
 80031f6:	68ec      	ldreq	r4, [r5, #12]
 80031f8:	e7cb      	b.n	8003192 <__swbuf_r+0x1a>
 80031fa:	4621      	mov	r1, r4
 80031fc:	4628      	mov	r0, r5
 80031fe:	f000 f81f 	bl	8003240 <__swsetup_r>
 8003202:	2800      	cmp	r0, #0
 8003204:	d0cc      	beq.n	80031a0 <__swbuf_r+0x28>
 8003206:	f04f 37ff 	mov.w	r7, #4294967295
 800320a:	4638      	mov	r0, r7
 800320c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800320e:	bf00      	nop
 8003210:	08003ba4 	.word	0x08003ba4
 8003214:	08003bc4 	.word	0x08003bc4
 8003218:	08003b84 	.word	0x08003b84

0800321c <_write_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	4c07      	ldr	r4, [pc, #28]	; (800323c <_write_r+0x20>)
 8003220:	4605      	mov	r5, r0
 8003222:	4608      	mov	r0, r1
 8003224:	4611      	mov	r1, r2
 8003226:	2200      	movs	r2, #0
 8003228:	6022      	str	r2, [r4, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	f7fd fe22 	bl	8000e74 <_write>
 8003230:	1c43      	adds	r3, r0, #1
 8003232:	d102      	bne.n	800323a <_write_r+0x1e>
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	b103      	cbz	r3, 800323a <_write_r+0x1e>
 8003238:	602b      	str	r3, [r5, #0]
 800323a:	bd38      	pop	{r3, r4, r5, pc}
 800323c:	20000144 	.word	0x20000144

08003240 <__swsetup_r>:
 8003240:	4b32      	ldr	r3, [pc, #200]	; (800330c <__swsetup_r+0xcc>)
 8003242:	b570      	push	{r4, r5, r6, lr}
 8003244:	681d      	ldr	r5, [r3, #0]
 8003246:	4606      	mov	r6, r0
 8003248:	460c      	mov	r4, r1
 800324a:	b125      	cbz	r5, 8003256 <__swsetup_r+0x16>
 800324c:	69ab      	ldr	r3, [r5, #24]
 800324e:	b913      	cbnz	r3, 8003256 <__swsetup_r+0x16>
 8003250:	4628      	mov	r0, r5
 8003252:	f7ff fd2f 	bl	8002cb4 <__sinit>
 8003256:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <__swsetup_r+0xd0>)
 8003258:	429c      	cmp	r4, r3
 800325a:	d10f      	bne.n	800327c <__swsetup_r+0x3c>
 800325c:	686c      	ldr	r4, [r5, #4]
 800325e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003262:	b29a      	uxth	r2, r3
 8003264:	0715      	lsls	r5, r2, #28
 8003266:	d42c      	bmi.n	80032c2 <__swsetup_r+0x82>
 8003268:	06d0      	lsls	r0, r2, #27
 800326a:	d411      	bmi.n	8003290 <__swsetup_r+0x50>
 800326c:	2209      	movs	r2, #9
 800326e:	6032      	str	r2, [r6, #0]
 8003270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003274:	81a3      	strh	r3, [r4, #12]
 8003276:	f04f 30ff 	mov.w	r0, #4294967295
 800327a:	e03e      	b.n	80032fa <__swsetup_r+0xba>
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <__swsetup_r+0xd4>)
 800327e:	429c      	cmp	r4, r3
 8003280:	d101      	bne.n	8003286 <__swsetup_r+0x46>
 8003282:	68ac      	ldr	r4, [r5, #8]
 8003284:	e7eb      	b.n	800325e <__swsetup_r+0x1e>
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <__swsetup_r+0xd8>)
 8003288:	429c      	cmp	r4, r3
 800328a:	bf08      	it	eq
 800328c:	68ec      	ldreq	r4, [r5, #12]
 800328e:	e7e6      	b.n	800325e <__swsetup_r+0x1e>
 8003290:	0751      	lsls	r1, r2, #29
 8003292:	d512      	bpl.n	80032ba <__swsetup_r+0x7a>
 8003294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003296:	b141      	cbz	r1, 80032aa <__swsetup_r+0x6a>
 8003298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800329c:	4299      	cmp	r1, r3
 800329e:	d002      	beq.n	80032a6 <__swsetup_r+0x66>
 80032a0:	4630      	mov	r0, r6
 80032a2:	f7ff fdbd 	bl	8002e20 <_free_r>
 80032a6:	2300      	movs	r3, #0
 80032a8:	6363      	str	r3, [r4, #52]	; 0x34
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032b0:	81a3      	strh	r3, [r4, #12]
 80032b2:	2300      	movs	r3, #0
 80032b4:	6063      	str	r3, [r4, #4]
 80032b6:	6923      	ldr	r3, [r4, #16]
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	89a3      	ldrh	r3, [r4, #12]
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	81a3      	strh	r3, [r4, #12]
 80032c2:	6923      	ldr	r3, [r4, #16]
 80032c4:	b94b      	cbnz	r3, 80032da <__swsetup_r+0x9a>
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d0:	d003      	beq.n	80032da <__swsetup_r+0x9a>
 80032d2:	4621      	mov	r1, r4
 80032d4:	4630      	mov	r0, r6
 80032d6:	f000 f867 	bl	80033a8 <__smakebuf_r>
 80032da:	89a2      	ldrh	r2, [r4, #12]
 80032dc:	f012 0301 	ands.w	r3, r2, #1
 80032e0:	d00c      	beq.n	80032fc <__swsetup_r+0xbc>
 80032e2:	2300      	movs	r3, #0
 80032e4:	60a3      	str	r3, [r4, #8]
 80032e6:	6963      	ldr	r3, [r4, #20]
 80032e8:	425b      	negs	r3, r3
 80032ea:	61a3      	str	r3, [r4, #24]
 80032ec:	6923      	ldr	r3, [r4, #16]
 80032ee:	b953      	cbnz	r3, 8003306 <__swsetup_r+0xc6>
 80032f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80032f8:	d1ba      	bne.n	8003270 <__swsetup_r+0x30>
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	0792      	lsls	r2, r2, #30
 80032fe:	bf58      	it	pl
 8003300:	6963      	ldrpl	r3, [r4, #20]
 8003302:	60a3      	str	r3, [r4, #8]
 8003304:	e7f2      	b.n	80032ec <__swsetup_r+0xac>
 8003306:	2000      	movs	r0, #0
 8003308:	e7f7      	b.n	80032fa <__swsetup_r+0xba>
 800330a:	bf00      	nop
 800330c:	20000010 	.word	0x20000010
 8003310:	08003ba4 	.word	0x08003ba4
 8003314:	08003bc4 	.word	0x08003bc4
 8003318:	08003b84 	.word	0x08003b84

0800331c <_close_r>:
 800331c:	b538      	push	{r3, r4, r5, lr}
 800331e:	4c06      	ldr	r4, [pc, #24]	; (8003338 <_close_r+0x1c>)
 8003320:	2300      	movs	r3, #0
 8003322:	4605      	mov	r5, r0
 8003324:	4608      	mov	r0, r1
 8003326:	6023      	str	r3, [r4, #0]
 8003328:	f000 fb84 	bl	8003a34 <_close>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d102      	bne.n	8003336 <_close_r+0x1a>
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	b103      	cbz	r3, 8003336 <_close_r+0x1a>
 8003334:	602b      	str	r3, [r5, #0]
 8003336:	bd38      	pop	{r3, r4, r5, pc}
 8003338:	20000144 	.word	0x20000144

0800333c <_lseek_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	4c07      	ldr	r4, [pc, #28]	; (800335c <_lseek_r+0x20>)
 8003340:	4605      	mov	r5, r0
 8003342:	4608      	mov	r0, r1
 8003344:	4611      	mov	r1, r2
 8003346:	2200      	movs	r2, #0
 8003348:	6022      	str	r2, [r4, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	f000 fb8a 	bl	8003a64 <_lseek>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_lseek_r+0x1e>
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	b103      	cbz	r3, 800335a <_lseek_r+0x1e>
 8003358:	602b      	str	r3, [r5, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	20000144 	.word	0x20000144

08003360 <__swhatbuf_r>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	460e      	mov	r6, r1
 8003364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003368:	2900      	cmp	r1, #0
 800336a:	b096      	sub	sp, #88	; 0x58
 800336c:	4614      	mov	r4, r2
 800336e:	461d      	mov	r5, r3
 8003370:	da07      	bge.n	8003382 <__swhatbuf_r+0x22>
 8003372:	2300      	movs	r3, #0
 8003374:	602b      	str	r3, [r5, #0]
 8003376:	89b3      	ldrh	r3, [r6, #12]
 8003378:	061a      	lsls	r2, r3, #24
 800337a:	d410      	bmi.n	800339e <__swhatbuf_r+0x3e>
 800337c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003380:	e00e      	b.n	80033a0 <__swhatbuf_r+0x40>
 8003382:	466a      	mov	r2, sp
 8003384:	f000 fb34 	bl	80039f0 <_fstat_r>
 8003388:	2800      	cmp	r0, #0
 800338a:	dbf2      	blt.n	8003372 <__swhatbuf_r+0x12>
 800338c:	9a01      	ldr	r2, [sp, #4]
 800338e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003392:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003396:	425a      	negs	r2, r3
 8003398:	415a      	adcs	r2, r3
 800339a:	602a      	str	r2, [r5, #0]
 800339c:	e7ee      	b.n	800337c <__swhatbuf_r+0x1c>
 800339e:	2340      	movs	r3, #64	; 0x40
 80033a0:	2000      	movs	r0, #0
 80033a2:	6023      	str	r3, [r4, #0]
 80033a4:	b016      	add	sp, #88	; 0x58
 80033a6:	bd70      	pop	{r4, r5, r6, pc}

080033a8 <__smakebuf_r>:
 80033a8:	898b      	ldrh	r3, [r1, #12]
 80033aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033ac:	079d      	lsls	r5, r3, #30
 80033ae:	4606      	mov	r6, r0
 80033b0:	460c      	mov	r4, r1
 80033b2:	d507      	bpl.n	80033c4 <__smakebuf_r+0x1c>
 80033b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80033b8:	6023      	str	r3, [r4, #0]
 80033ba:	6123      	str	r3, [r4, #16]
 80033bc:	2301      	movs	r3, #1
 80033be:	6163      	str	r3, [r4, #20]
 80033c0:	b002      	add	sp, #8
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
 80033c4:	ab01      	add	r3, sp, #4
 80033c6:	466a      	mov	r2, sp
 80033c8:	f7ff ffca 	bl	8003360 <__swhatbuf_r>
 80033cc:	9900      	ldr	r1, [sp, #0]
 80033ce:	4605      	mov	r5, r0
 80033d0:	4630      	mov	r0, r6
 80033d2:	f7ff fd73 	bl	8002ebc <_malloc_r>
 80033d6:	b948      	cbnz	r0, 80033ec <__smakebuf_r+0x44>
 80033d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033dc:	059a      	lsls	r2, r3, #22
 80033de:	d4ef      	bmi.n	80033c0 <__smakebuf_r+0x18>
 80033e0:	f023 0303 	bic.w	r3, r3, #3
 80033e4:	f043 0302 	orr.w	r3, r3, #2
 80033e8:	81a3      	strh	r3, [r4, #12]
 80033ea:	e7e3      	b.n	80033b4 <__smakebuf_r+0xc>
 80033ec:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <__smakebuf_r+0x7c>)
 80033ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80033f0:	89a3      	ldrh	r3, [r4, #12]
 80033f2:	6020      	str	r0, [r4, #0]
 80033f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f8:	81a3      	strh	r3, [r4, #12]
 80033fa:	9b00      	ldr	r3, [sp, #0]
 80033fc:	6163      	str	r3, [r4, #20]
 80033fe:	9b01      	ldr	r3, [sp, #4]
 8003400:	6120      	str	r0, [r4, #16]
 8003402:	b15b      	cbz	r3, 800341c <__smakebuf_r+0x74>
 8003404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003408:	4630      	mov	r0, r6
 800340a:	f000 fb03 	bl	8003a14 <_isatty_r>
 800340e:	b128      	cbz	r0, 800341c <__smakebuf_r+0x74>
 8003410:	89a3      	ldrh	r3, [r4, #12]
 8003412:	f023 0303 	bic.w	r3, r3, #3
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	81a3      	strh	r3, [r4, #12]
 800341c:	89a3      	ldrh	r3, [r4, #12]
 800341e:	431d      	orrs	r5, r3
 8003420:	81a5      	strh	r5, [r4, #12]
 8003422:	e7cd      	b.n	80033c0 <__smakebuf_r+0x18>
 8003424:	08002c7d 	.word	0x08002c7d

08003428 <malloc>:
 8003428:	4b02      	ldr	r3, [pc, #8]	; (8003434 <malloc+0xc>)
 800342a:	4601      	mov	r1, r0
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	f7ff bd45 	b.w	8002ebc <_malloc_r>
 8003432:	bf00      	nop
 8003434:	20000010 	.word	0x20000010

08003438 <__malloc_lock>:
 8003438:	4770      	bx	lr

0800343a <__malloc_unlock>:
 800343a:	4770      	bx	lr

0800343c <__sfputc_r>:
 800343c:	6893      	ldr	r3, [r2, #8]
 800343e:	3b01      	subs	r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	b410      	push	{r4}
 8003444:	6093      	str	r3, [r2, #8]
 8003446:	da08      	bge.n	800345a <__sfputc_r+0x1e>
 8003448:	6994      	ldr	r4, [r2, #24]
 800344a:	42a3      	cmp	r3, r4
 800344c:	db01      	blt.n	8003452 <__sfputc_r+0x16>
 800344e:	290a      	cmp	r1, #10
 8003450:	d103      	bne.n	800345a <__sfputc_r+0x1e>
 8003452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003456:	f7ff be8f 	b.w	8003178 <__swbuf_r>
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	1c58      	adds	r0, r3, #1
 800345e:	6010      	str	r0, [r2, #0]
 8003460:	7019      	strb	r1, [r3, #0]
 8003462:	4608      	mov	r0, r1
 8003464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003468:	4770      	bx	lr

0800346a <__sfputs_r>:
 800346a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346c:	4606      	mov	r6, r0
 800346e:	460f      	mov	r7, r1
 8003470:	4614      	mov	r4, r2
 8003472:	18d5      	adds	r5, r2, r3
 8003474:	42ac      	cmp	r4, r5
 8003476:	d101      	bne.n	800347c <__sfputs_r+0x12>
 8003478:	2000      	movs	r0, #0
 800347a:	e007      	b.n	800348c <__sfputs_r+0x22>
 800347c:	463a      	mov	r2, r7
 800347e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003482:	4630      	mov	r0, r6
 8003484:	f7ff ffda 	bl	800343c <__sfputc_r>
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	d1f3      	bne.n	8003474 <__sfputs_r+0xa>
 800348c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003490 <_vfiprintf_r>:
 8003490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003494:	460c      	mov	r4, r1
 8003496:	b09d      	sub	sp, #116	; 0x74
 8003498:	4617      	mov	r7, r2
 800349a:	461d      	mov	r5, r3
 800349c:	4606      	mov	r6, r0
 800349e:	b118      	cbz	r0, 80034a8 <_vfiprintf_r+0x18>
 80034a0:	6983      	ldr	r3, [r0, #24]
 80034a2:	b90b      	cbnz	r3, 80034a8 <_vfiprintf_r+0x18>
 80034a4:	f7ff fc06 	bl	8002cb4 <__sinit>
 80034a8:	4b7c      	ldr	r3, [pc, #496]	; (800369c <_vfiprintf_r+0x20c>)
 80034aa:	429c      	cmp	r4, r3
 80034ac:	d158      	bne.n	8003560 <_vfiprintf_r+0xd0>
 80034ae:	6874      	ldr	r4, [r6, #4]
 80034b0:	89a3      	ldrh	r3, [r4, #12]
 80034b2:	0718      	lsls	r0, r3, #28
 80034b4:	d55e      	bpl.n	8003574 <_vfiprintf_r+0xe4>
 80034b6:	6923      	ldr	r3, [r4, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d05b      	beq.n	8003574 <_vfiprintf_r+0xe4>
 80034bc:	2300      	movs	r3, #0
 80034be:	9309      	str	r3, [sp, #36]	; 0x24
 80034c0:	2320      	movs	r3, #32
 80034c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034c6:	2330      	movs	r3, #48	; 0x30
 80034c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034cc:	9503      	str	r5, [sp, #12]
 80034ce:	f04f 0b01 	mov.w	fp, #1
 80034d2:	46b8      	mov	r8, r7
 80034d4:	4645      	mov	r5, r8
 80034d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034da:	b10b      	cbz	r3, 80034e0 <_vfiprintf_r+0x50>
 80034dc:	2b25      	cmp	r3, #37	; 0x25
 80034de:	d154      	bne.n	800358a <_vfiprintf_r+0xfa>
 80034e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80034e4:	d00b      	beq.n	80034fe <_vfiprintf_r+0x6e>
 80034e6:	4653      	mov	r3, sl
 80034e8:	463a      	mov	r2, r7
 80034ea:	4621      	mov	r1, r4
 80034ec:	4630      	mov	r0, r6
 80034ee:	f7ff ffbc 	bl	800346a <__sfputs_r>
 80034f2:	3001      	adds	r0, #1
 80034f4:	f000 80c2 	beq.w	800367c <_vfiprintf_r+0x1ec>
 80034f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034fa:	4453      	add	r3, sl
 80034fc:	9309      	str	r3, [sp, #36]	; 0x24
 80034fe:	f898 3000 	ldrb.w	r3, [r8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80ba 	beq.w	800367c <_vfiprintf_r+0x1ec>
 8003508:	2300      	movs	r3, #0
 800350a:	f04f 32ff 	mov.w	r2, #4294967295
 800350e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003512:	9304      	str	r3, [sp, #16]
 8003514:	9307      	str	r3, [sp, #28]
 8003516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800351a:	931a      	str	r3, [sp, #104]	; 0x68
 800351c:	46a8      	mov	r8, r5
 800351e:	2205      	movs	r2, #5
 8003520:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003524:	485e      	ldr	r0, [pc, #376]	; (80036a0 <_vfiprintf_r+0x210>)
 8003526:	f7fc fe8b 	bl	8000240 <memchr>
 800352a:	9b04      	ldr	r3, [sp, #16]
 800352c:	bb78      	cbnz	r0, 800358e <_vfiprintf_r+0xfe>
 800352e:	06d9      	lsls	r1, r3, #27
 8003530:	bf44      	itt	mi
 8003532:	2220      	movmi	r2, #32
 8003534:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003538:	071a      	lsls	r2, r3, #28
 800353a:	bf44      	itt	mi
 800353c:	222b      	movmi	r2, #43	; 0x2b
 800353e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003542:	782a      	ldrb	r2, [r5, #0]
 8003544:	2a2a      	cmp	r2, #42	; 0x2a
 8003546:	d02a      	beq.n	800359e <_vfiprintf_r+0x10e>
 8003548:	9a07      	ldr	r2, [sp, #28]
 800354a:	46a8      	mov	r8, r5
 800354c:	2000      	movs	r0, #0
 800354e:	250a      	movs	r5, #10
 8003550:	4641      	mov	r1, r8
 8003552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003556:	3b30      	subs	r3, #48	; 0x30
 8003558:	2b09      	cmp	r3, #9
 800355a:	d969      	bls.n	8003630 <_vfiprintf_r+0x1a0>
 800355c:	b360      	cbz	r0, 80035b8 <_vfiprintf_r+0x128>
 800355e:	e024      	b.n	80035aa <_vfiprintf_r+0x11a>
 8003560:	4b50      	ldr	r3, [pc, #320]	; (80036a4 <_vfiprintf_r+0x214>)
 8003562:	429c      	cmp	r4, r3
 8003564:	d101      	bne.n	800356a <_vfiprintf_r+0xda>
 8003566:	68b4      	ldr	r4, [r6, #8]
 8003568:	e7a2      	b.n	80034b0 <_vfiprintf_r+0x20>
 800356a:	4b4f      	ldr	r3, [pc, #316]	; (80036a8 <_vfiprintf_r+0x218>)
 800356c:	429c      	cmp	r4, r3
 800356e:	bf08      	it	eq
 8003570:	68f4      	ldreq	r4, [r6, #12]
 8003572:	e79d      	b.n	80034b0 <_vfiprintf_r+0x20>
 8003574:	4621      	mov	r1, r4
 8003576:	4630      	mov	r0, r6
 8003578:	f7ff fe62 	bl	8003240 <__swsetup_r>
 800357c:	2800      	cmp	r0, #0
 800357e:	d09d      	beq.n	80034bc <_vfiprintf_r+0x2c>
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	b01d      	add	sp, #116	; 0x74
 8003586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800358a:	46a8      	mov	r8, r5
 800358c:	e7a2      	b.n	80034d4 <_vfiprintf_r+0x44>
 800358e:	4a44      	ldr	r2, [pc, #272]	; (80036a0 <_vfiprintf_r+0x210>)
 8003590:	1a80      	subs	r0, r0, r2
 8003592:	fa0b f000 	lsl.w	r0, fp, r0
 8003596:	4318      	orrs	r0, r3
 8003598:	9004      	str	r0, [sp, #16]
 800359a:	4645      	mov	r5, r8
 800359c:	e7be      	b.n	800351c <_vfiprintf_r+0x8c>
 800359e:	9a03      	ldr	r2, [sp, #12]
 80035a0:	1d11      	adds	r1, r2, #4
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	9103      	str	r1, [sp, #12]
 80035a6:	2a00      	cmp	r2, #0
 80035a8:	db01      	blt.n	80035ae <_vfiprintf_r+0x11e>
 80035aa:	9207      	str	r2, [sp, #28]
 80035ac:	e004      	b.n	80035b8 <_vfiprintf_r+0x128>
 80035ae:	4252      	negs	r2, r2
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	9207      	str	r2, [sp, #28]
 80035b6:	9304      	str	r3, [sp, #16]
 80035b8:	f898 3000 	ldrb.w	r3, [r8]
 80035bc:	2b2e      	cmp	r3, #46	; 0x2e
 80035be:	d10e      	bne.n	80035de <_vfiprintf_r+0x14e>
 80035c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80035c4:	2b2a      	cmp	r3, #42	; 0x2a
 80035c6:	d138      	bne.n	800363a <_vfiprintf_r+0x1aa>
 80035c8:	9b03      	ldr	r3, [sp, #12]
 80035ca:	1d1a      	adds	r2, r3, #4
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	9203      	str	r2, [sp, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bfb8      	it	lt
 80035d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80035d8:	f108 0802 	add.w	r8, r8, #2
 80035dc:	9305      	str	r3, [sp, #20]
 80035de:	4d33      	ldr	r5, [pc, #204]	; (80036ac <_vfiprintf_r+0x21c>)
 80035e0:	f898 1000 	ldrb.w	r1, [r8]
 80035e4:	2203      	movs	r2, #3
 80035e6:	4628      	mov	r0, r5
 80035e8:	f7fc fe2a 	bl	8000240 <memchr>
 80035ec:	b140      	cbz	r0, 8003600 <_vfiprintf_r+0x170>
 80035ee:	2340      	movs	r3, #64	; 0x40
 80035f0:	1b40      	subs	r0, r0, r5
 80035f2:	fa03 f000 	lsl.w	r0, r3, r0
 80035f6:	9b04      	ldr	r3, [sp, #16]
 80035f8:	4303      	orrs	r3, r0
 80035fa:	f108 0801 	add.w	r8, r8, #1
 80035fe:	9304      	str	r3, [sp, #16]
 8003600:	f898 1000 	ldrb.w	r1, [r8]
 8003604:	482a      	ldr	r0, [pc, #168]	; (80036b0 <_vfiprintf_r+0x220>)
 8003606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800360a:	2206      	movs	r2, #6
 800360c:	f108 0701 	add.w	r7, r8, #1
 8003610:	f7fc fe16 	bl	8000240 <memchr>
 8003614:	2800      	cmp	r0, #0
 8003616:	d037      	beq.n	8003688 <_vfiprintf_r+0x1f8>
 8003618:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <_vfiprintf_r+0x224>)
 800361a:	bb1b      	cbnz	r3, 8003664 <_vfiprintf_r+0x1d4>
 800361c:	9b03      	ldr	r3, [sp, #12]
 800361e:	3307      	adds	r3, #7
 8003620:	f023 0307 	bic.w	r3, r3, #7
 8003624:	3308      	adds	r3, #8
 8003626:	9303      	str	r3, [sp, #12]
 8003628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800362a:	444b      	add	r3, r9
 800362c:	9309      	str	r3, [sp, #36]	; 0x24
 800362e:	e750      	b.n	80034d2 <_vfiprintf_r+0x42>
 8003630:	fb05 3202 	mla	r2, r5, r2, r3
 8003634:	2001      	movs	r0, #1
 8003636:	4688      	mov	r8, r1
 8003638:	e78a      	b.n	8003550 <_vfiprintf_r+0xc0>
 800363a:	2300      	movs	r3, #0
 800363c:	f108 0801 	add.w	r8, r8, #1
 8003640:	9305      	str	r3, [sp, #20]
 8003642:	4619      	mov	r1, r3
 8003644:	250a      	movs	r5, #10
 8003646:	4640      	mov	r0, r8
 8003648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800364c:	3a30      	subs	r2, #48	; 0x30
 800364e:	2a09      	cmp	r2, #9
 8003650:	d903      	bls.n	800365a <_vfiprintf_r+0x1ca>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0c3      	beq.n	80035de <_vfiprintf_r+0x14e>
 8003656:	9105      	str	r1, [sp, #20]
 8003658:	e7c1      	b.n	80035de <_vfiprintf_r+0x14e>
 800365a:	fb05 2101 	mla	r1, r5, r1, r2
 800365e:	2301      	movs	r3, #1
 8003660:	4680      	mov	r8, r0
 8003662:	e7f0      	b.n	8003646 <_vfiprintf_r+0x1b6>
 8003664:	ab03      	add	r3, sp, #12
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	4622      	mov	r2, r4
 800366a:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <_vfiprintf_r+0x228>)
 800366c:	a904      	add	r1, sp, #16
 800366e:	4630      	mov	r0, r6
 8003670:	f3af 8000 	nop.w
 8003674:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003678:	4681      	mov	r9, r0
 800367a:	d1d5      	bne.n	8003628 <_vfiprintf_r+0x198>
 800367c:	89a3      	ldrh	r3, [r4, #12]
 800367e:	065b      	lsls	r3, r3, #25
 8003680:	f53f af7e 	bmi.w	8003580 <_vfiprintf_r+0xf0>
 8003684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003686:	e77d      	b.n	8003584 <_vfiprintf_r+0xf4>
 8003688:	ab03      	add	r3, sp, #12
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4622      	mov	r2, r4
 800368e:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <_vfiprintf_r+0x228>)
 8003690:	a904      	add	r1, sp, #16
 8003692:	4630      	mov	r0, r6
 8003694:	f000 f888 	bl	80037a8 <_printf_i>
 8003698:	e7ec      	b.n	8003674 <_vfiprintf_r+0x1e4>
 800369a:	bf00      	nop
 800369c:	08003ba4 	.word	0x08003ba4
 80036a0:	08003be8 	.word	0x08003be8
 80036a4:	08003bc4 	.word	0x08003bc4
 80036a8:	08003b84 	.word	0x08003b84
 80036ac:	08003bee 	.word	0x08003bee
 80036b0:	08003bf2 	.word	0x08003bf2
 80036b4:	00000000 	.word	0x00000000
 80036b8:	0800346b 	.word	0x0800346b

080036bc <_printf_common>:
 80036bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c0:	4691      	mov	r9, r2
 80036c2:	461f      	mov	r7, r3
 80036c4:	688a      	ldr	r2, [r1, #8]
 80036c6:	690b      	ldr	r3, [r1, #16]
 80036c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036cc:	4293      	cmp	r3, r2
 80036ce:	bfb8      	it	lt
 80036d0:	4613      	movlt	r3, r2
 80036d2:	f8c9 3000 	str.w	r3, [r9]
 80036d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036da:	4606      	mov	r6, r0
 80036dc:	460c      	mov	r4, r1
 80036de:	b112      	cbz	r2, 80036e6 <_printf_common+0x2a>
 80036e0:	3301      	adds	r3, #1
 80036e2:	f8c9 3000 	str.w	r3, [r9]
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	0699      	lsls	r1, r3, #26
 80036ea:	bf42      	ittt	mi
 80036ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036f0:	3302      	addmi	r3, #2
 80036f2:	f8c9 3000 	strmi.w	r3, [r9]
 80036f6:	6825      	ldr	r5, [r4, #0]
 80036f8:	f015 0506 	ands.w	r5, r5, #6
 80036fc:	d107      	bne.n	800370e <_printf_common+0x52>
 80036fe:	f104 0a19 	add.w	sl, r4, #25
 8003702:	68e3      	ldr	r3, [r4, #12]
 8003704:	f8d9 2000 	ldr.w	r2, [r9]
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	42ab      	cmp	r3, r5
 800370c:	dc28      	bgt.n	8003760 <_printf_common+0xa4>
 800370e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003712:	6822      	ldr	r2, [r4, #0]
 8003714:	3300      	adds	r3, #0
 8003716:	bf18      	it	ne
 8003718:	2301      	movne	r3, #1
 800371a:	0692      	lsls	r2, r2, #26
 800371c:	d42d      	bmi.n	800377a <_printf_common+0xbe>
 800371e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003722:	4639      	mov	r1, r7
 8003724:	4630      	mov	r0, r6
 8003726:	47c0      	blx	r8
 8003728:	3001      	adds	r0, #1
 800372a:	d020      	beq.n	800376e <_printf_common+0xb2>
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	68e5      	ldr	r5, [r4, #12]
 8003730:	f8d9 2000 	ldr.w	r2, [r9]
 8003734:	f003 0306 	and.w	r3, r3, #6
 8003738:	2b04      	cmp	r3, #4
 800373a:	bf08      	it	eq
 800373c:	1aad      	subeq	r5, r5, r2
 800373e:	68a3      	ldr	r3, [r4, #8]
 8003740:	6922      	ldr	r2, [r4, #16]
 8003742:	bf0c      	ite	eq
 8003744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003748:	2500      	movne	r5, #0
 800374a:	4293      	cmp	r3, r2
 800374c:	bfc4      	itt	gt
 800374e:	1a9b      	subgt	r3, r3, r2
 8003750:	18ed      	addgt	r5, r5, r3
 8003752:	f04f 0900 	mov.w	r9, #0
 8003756:	341a      	adds	r4, #26
 8003758:	454d      	cmp	r5, r9
 800375a:	d11a      	bne.n	8003792 <_printf_common+0xd6>
 800375c:	2000      	movs	r0, #0
 800375e:	e008      	b.n	8003772 <_printf_common+0xb6>
 8003760:	2301      	movs	r3, #1
 8003762:	4652      	mov	r2, sl
 8003764:	4639      	mov	r1, r7
 8003766:	4630      	mov	r0, r6
 8003768:	47c0      	blx	r8
 800376a:	3001      	adds	r0, #1
 800376c:	d103      	bne.n	8003776 <_printf_common+0xba>
 800376e:	f04f 30ff 	mov.w	r0, #4294967295
 8003772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003776:	3501      	adds	r5, #1
 8003778:	e7c3      	b.n	8003702 <_printf_common+0x46>
 800377a:	18e1      	adds	r1, r4, r3
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	2030      	movs	r0, #48	; 0x30
 8003780:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003784:	4422      	add	r2, r4
 8003786:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800378a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800378e:	3302      	adds	r3, #2
 8003790:	e7c5      	b.n	800371e <_printf_common+0x62>
 8003792:	2301      	movs	r3, #1
 8003794:	4622      	mov	r2, r4
 8003796:	4639      	mov	r1, r7
 8003798:	4630      	mov	r0, r6
 800379a:	47c0      	blx	r8
 800379c:	3001      	adds	r0, #1
 800379e:	d0e6      	beq.n	800376e <_printf_common+0xb2>
 80037a0:	f109 0901 	add.w	r9, r9, #1
 80037a4:	e7d8      	b.n	8003758 <_printf_common+0x9c>
	...

080037a8 <_printf_i>:
 80037a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037b0:	460c      	mov	r4, r1
 80037b2:	7e09      	ldrb	r1, [r1, #24]
 80037b4:	b085      	sub	sp, #20
 80037b6:	296e      	cmp	r1, #110	; 0x6e
 80037b8:	4617      	mov	r7, r2
 80037ba:	4606      	mov	r6, r0
 80037bc:	4698      	mov	r8, r3
 80037be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037c0:	f000 80b3 	beq.w	800392a <_printf_i+0x182>
 80037c4:	d822      	bhi.n	800380c <_printf_i+0x64>
 80037c6:	2963      	cmp	r1, #99	; 0x63
 80037c8:	d036      	beq.n	8003838 <_printf_i+0x90>
 80037ca:	d80a      	bhi.n	80037e2 <_printf_i+0x3a>
 80037cc:	2900      	cmp	r1, #0
 80037ce:	f000 80b9 	beq.w	8003944 <_printf_i+0x19c>
 80037d2:	2958      	cmp	r1, #88	; 0x58
 80037d4:	f000 8083 	beq.w	80038de <_printf_i+0x136>
 80037d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037e0:	e032      	b.n	8003848 <_printf_i+0xa0>
 80037e2:	2964      	cmp	r1, #100	; 0x64
 80037e4:	d001      	beq.n	80037ea <_printf_i+0x42>
 80037e6:	2969      	cmp	r1, #105	; 0x69
 80037e8:	d1f6      	bne.n	80037d8 <_printf_i+0x30>
 80037ea:	6820      	ldr	r0, [r4, #0]
 80037ec:	6813      	ldr	r3, [r2, #0]
 80037ee:	0605      	lsls	r5, r0, #24
 80037f0:	f103 0104 	add.w	r1, r3, #4
 80037f4:	d52a      	bpl.n	800384c <_printf_i+0xa4>
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6011      	str	r1, [r2, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da03      	bge.n	8003806 <_printf_i+0x5e>
 80037fe:	222d      	movs	r2, #45	; 0x2d
 8003800:	425b      	negs	r3, r3
 8003802:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003806:	486f      	ldr	r0, [pc, #444]	; (80039c4 <_printf_i+0x21c>)
 8003808:	220a      	movs	r2, #10
 800380a:	e039      	b.n	8003880 <_printf_i+0xd8>
 800380c:	2973      	cmp	r1, #115	; 0x73
 800380e:	f000 809d 	beq.w	800394c <_printf_i+0x1a4>
 8003812:	d808      	bhi.n	8003826 <_printf_i+0x7e>
 8003814:	296f      	cmp	r1, #111	; 0x6f
 8003816:	d020      	beq.n	800385a <_printf_i+0xb2>
 8003818:	2970      	cmp	r1, #112	; 0x70
 800381a:	d1dd      	bne.n	80037d8 <_printf_i+0x30>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	f043 0320 	orr.w	r3, r3, #32
 8003822:	6023      	str	r3, [r4, #0]
 8003824:	e003      	b.n	800382e <_printf_i+0x86>
 8003826:	2975      	cmp	r1, #117	; 0x75
 8003828:	d017      	beq.n	800385a <_printf_i+0xb2>
 800382a:	2978      	cmp	r1, #120	; 0x78
 800382c:	d1d4      	bne.n	80037d8 <_printf_i+0x30>
 800382e:	2378      	movs	r3, #120	; 0x78
 8003830:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003834:	4864      	ldr	r0, [pc, #400]	; (80039c8 <_printf_i+0x220>)
 8003836:	e055      	b.n	80038e4 <_printf_i+0x13c>
 8003838:	6813      	ldr	r3, [r2, #0]
 800383a:	1d19      	adds	r1, r3, #4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6011      	str	r1, [r2, #0]
 8003840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003848:	2301      	movs	r3, #1
 800384a:	e08c      	b.n	8003966 <_printf_i+0x1be>
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6011      	str	r1, [r2, #0]
 8003850:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003854:	bf18      	it	ne
 8003856:	b21b      	sxthne	r3, r3
 8003858:	e7cf      	b.n	80037fa <_printf_i+0x52>
 800385a:	6813      	ldr	r3, [r2, #0]
 800385c:	6825      	ldr	r5, [r4, #0]
 800385e:	1d18      	adds	r0, r3, #4
 8003860:	6010      	str	r0, [r2, #0]
 8003862:	0628      	lsls	r0, r5, #24
 8003864:	d501      	bpl.n	800386a <_printf_i+0xc2>
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	e002      	b.n	8003870 <_printf_i+0xc8>
 800386a:	0668      	lsls	r0, r5, #25
 800386c:	d5fb      	bpl.n	8003866 <_printf_i+0xbe>
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	4854      	ldr	r0, [pc, #336]	; (80039c4 <_printf_i+0x21c>)
 8003872:	296f      	cmp	r1, #111	; 0x6f
 8003874:	bf14      	ite	ne
 8003876:	220a      	movne	r2, #10
 8003878:	2208      	moveq	r2, #8
 800387a:	2100      	movs	r1, #0
 800387c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003880:	6865      	ldr	r5, [r4, #4]
 8003882:	60a5      	str	r5, [r4, #8]
 8003884:	2d00      	cmp	r5, #0
 8003886:	f2c0 8095 	blt.w	80039b4 <_printf_i+0x20c>
 800388a:	6821      	ldr	r1, [r4, #0]
 800388c:	f021 0104 	bic.w	r1, r1, #4
 8003890:	6021      	str	r1, [r4, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d13d      	bne.n	8003912 <_printf_i+0x16a>
 8003896:	2d00      	cmp	r5, #0
 8003898:	f040 808e 	bne.w	80039b8 <_printf_i+0x210>
 800389c:	4665      	mov	r5, ip
 800389e:	2a08      	cmp	r2, #8
 80038a0:	d10b      	bne.n	80038ba <_printf_i+0x112>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	07db      	lsls	r3, r3, #31
 80038a6:	d508      	bpl.n	80038ba <_printf_i+0x112>
 80038a8:	6923      	ldr	r3, [r4, #16]
 80038aa:	6862      	ldr	r2, [r4, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	bfde      	ittt	le
 80038b0:	2330      	movle	r3, #48	; 0x30
 80038b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038ba:	ebac 0305 	sub.w	r3, ip, r5
 80038be:	6123      	str	r3, [r4, #16]
 80038c0:	f8cd 8000 	str.w	r8, [sp]
 80038c4:	463b      	mov	r3, r7
 80038c6:	aa03      	add	r2, sp, #12
 80038c8:	4621      	mov	r1, r4
 80038ca:	4630      	mov	r0, r6
 80038cc:	f7ff fef6 	bl	80036bc <_printf_common>
 80038d0:	3001      	adds	r0, #1
 80038d2:	d14d      	bne.n	8003970 <_printf_i+0x1c8>
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	b005      	add	sp, #20
 80038da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038de:	4839      	ldr	r0, [pc, #228]	; (80039c4 <_printf_i+0x21c>)
 80038e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038e4:	6813      	ldr	r3, [r2, #0]
 80038e6:	6821      	ldr	r1, [r4, #0]
 80038e8:	1d1d      	adds	r5, r3, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6015      	str	r5, [r2, #0]
 80038ee:	060a      	lsls	r2, r1, #24
 80038f0:	d50b      	bpl.n	800390a <_printf_i+0x162>
 80038f2:	07ca      	lsls	r2, r1, #31
 80038f4:	bf44      	itt	mi
 80038f6:	f041 0120 	orrmi.w	r1, r1, #32
 80038fa:	6021      	strmi	r1, [r4, #0]
 80038fc:	b91b      	cbnz	r3, 8003906 <_printf_i+0x15e>
 80038fe:	6822      	ldr	r2, [r4, #0]
 8003900:	f022 0220 	bic.w	r2, r2, #32
 8003904:	6022      	str	r2, [r4, #0]
 8003906:	2210      	movs	r2, #16
 8003908:	e7b7      	b.n	800387a <_printf_i+0xd2>
 800390a:	064d      	lsls	r5, r1, #25
 800390c:	bf48      	it	mi
 800390e:	b29b      	uxthmi	r3, r3
 8003910:	e7ef      	b.n	80038f2 <_printf_i+0x14a>
 8003912:	4665      	mov	r5, ip
 8003914:	fbb3 f1f2 	udiv	r1, r3, r2
 8003918:	fb02 3311 	mls	r3, r2, r1, r3
 800391c:	5cc3      	ldrb	r3, [r0, r3]
 800391e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003922:	460b      	mov	r3, r1
 8003924:	2900      	cmp	r1, #0
 8003926:	d1f5      	bne.n	8003914 <_printf_i+0x16c>
 8003928:	e7b9      	b.n	800389e <_printf_i+0xf6>
 800392a:	6813      	ldr	r3, [r2, #0]
 800392c:	6825      	ldr	r5, [r4, #0]
 800392e:	6961      	ldr	r1, [r4, #20]
 8003930:	1d18      	adds	r0, r3, #4
 8003932:	6010      	str	r0, [r2, #0]
 8003934:	0628      	lsls	r0, r5, #24
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	d501      	bpl.n	800393e <_printf_i+0x196>
 800393a:	6019      	str	r1, [r3, #0]
 800393c:	e002      	b.n	8003944 <_printf_i+0x19c>
 800393e:	066a      	lsls	r2, r5, #25
 8003940:	d5fb      	bpl.n	800393a <_printf_i+0x192>
 8003942:	8019      	strh	r1, [r3, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	6123      	str	r3, [r4, #16]
 8003948:	4665      	mov	r5, ip
 800394a:	e7b9      	b.n	80038c0 <_printf_i+0x118>
 800394c:	6813      	ldr	r3, [r2, #0]
 800394e:	1d19      	adds	r1, r3, #4
 8003950:	6011      	str	r1, [r2, #0]
 8003952:	681d      	ldr	r5, [r3, #0]
 8003954:	6862      	ldr	r2, [r4, #4]
 8003956:	2100      	movs	r1, #0
 8003958:	4628      	mov	r0, r5
 800395a:	f7fc fc71 	bl	8000240 <memchr>
 800395e:	b108      	cbz	r0, 8003964 <_printf_i+0x1bc>
 8003960:	1b40      	subs	r0, r0, r5
 8003962:	6060      	str	r0, [r4, #4]
 8003964:	6863      	ldr	r3, [r4, #4]
 8003966:	6123      	str	r3, [r4, #16]
 8003968:	2300      	movs	r3, #0
 800396a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800396e:	e7a7      	b.n	80038c0 <_printf_i+0x118>
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	462a      	mov	r2, r5
 8003974:	4639      	mov	r1, r7
 8003976:	4630      	mov	r0, r6
 8003978:	47c0      	blx	r8
 800397a:	3001      	adds	r0, #1
 800397c:	d0aa      	beq.n	80038d4 <_printf_i+0x12c>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	079b      	lsls	r3, r3, #30
 8003982:	d413      	bmi.n	80039ac <_printf_i+0x204>
 8003984:	68e0      	ldr	r0, [r4, #12]
 8003986:	9b03      	ldr	r3, [sp, #12]
 8003988:	4298      	cmp	r0, r3
 800398a:	bfb8      	it	lt
 800398c:	4618      	movlt	r0, r3
 800398e:	e7a3      	b.n	80038d8 <_printf_i+0x130>
 8003990:	2301      	movs	r3, #1
 8003992:	464a      	mov	r2, r9
 8003994:	4639      	mov	r1, r7
 8003996:	4630      	mov	r0, r6
 8003998:	47c0      	blx	r8
 800399a:	3001      	adds	r0, #1
 800399c:	d09a      	beq.n	80038d4 <_printf_i+0x12c>
 800399e:	3501      	adds	r5, #1
 80039a0:	68e3      	ldr	r3, [r4, #12]
 80039a2:	9a03      	ldr	r2, [sp, #12]
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	42ab      	cmp	r3, r5
 80039a8:	dcf2      	bgt.n	8003990 <_printf_i+0x1e8>
 80039aa:	e7eb      	b.n	8003984 <_printf_i+0x1dc>
 80039ac:	2500      	movs	r5, #0
 80039ae:	f104 0919 	add.w	r9, r4, #25
 80039b2:	e7f5      	b.n	80039a0 <_printf_i+0x1f8>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ac      	bne.n	8003912 <_printf_i+0x16a>
 80039b8:	7803      	ldrb	r3, [r0, #0]
 80039ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039c2:	e76c      	b.n	800389e <_printf_i+0xf6>
 80039c4:	08003bf9 	.word	0x08003bf9
 80039c8:	08003c0a 	.word	0x08003c0a

080039cc <_read_r>:
 80039cc:	b538      	push	{r3, r4, r5, lr}
 80039ce:	4c07      	ldr	r4, [pc, #28]	; (80039ec <_read_r+0x20>)
 80039d0:	4605      	mov	r5, r0
 80039d2:	4608      	mov	r0, r1
 80039d4:	4611      	mov	r1, r2
 80039d6:	2200      	movs	r2, #0
 80039d8:	6022      	str	r2, [r4, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	f7fd fa60 	bl	8000ea0 <_read>
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	d102      	bne.n	80039ea <_read_r+0x1e>
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	b103      	cbz	r3, 80039ea <_read_r+0x1e>
 80039e8:	602b      	str	r3, [r5, #0]
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	20000144 	.word	0x20000144

080039f0 <_fstat_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	4c07      	ldr	r4, [pc, #28]	; (8003a10 <_fstat_r+0x20>)
 80039f4:	2300      	movs	r3, #0
 80039f6:	4605      	mov	r5, r0
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	f000 f821 	bl	8003a44 <_fstat>
 8003a02:	1c43      	adds	r3, r0, #1
 8003a04:	d102      	bne.n	8003a0c <_fstat_r+0x1c>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	b103      	cbz	r3, 8003a0c <_fstat_r+0x1c>
 8003a0a:	602b      	str	r3, [r5, #0]
 8003a0c:	bd38      	pop	{r3, r4, r5, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000144 	.word	0x20000144

08003a14 <_isatty_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4c06      	ldr	r4, [pc, #24]	; (8003a30 <_isatty_r+0x1c>)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	6023      	str	r3, [r4, #0]
 8003a20:	f000 f818 	bl	8003a54 <_isatty>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_isatty_r+0x1a>
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_isatty_r+0x1a>
 8003a2c:	602b      	str	r3, [r5, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	20000144 	.word	0x20000144

08003a34 <_close>:
 8003a34:	4b02      	ldr	r3, [pc, #8]	; (8003a40 <_close+0xc>)
 8003a36:	2258      	movs	r2, #88	; 0x58
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3e:	4770      	bx	lr
 8003a40:	20000144 	.word	0x20000144

08003a44 <_fstat>:
 8003a44:	4b02      	ldr	r3, [pc, #8]	; (8003a50 <_fstat+0xc>)
 8003a46:	2258      	movs	r2, #88	; 0x58
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4e:	4770      	bx	lr
 8003a50:	20000144 	.word	0x20000144

08003a54 <_isatty>:
 8003a54:	4b02      	ldr	r3, [pc, #8]	; (8003a60 <_isatty+0xc>)
 8003a56:	2258      	movs	r2, #88	; 0x58
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000144 	.word	0x20000144

08003a64 <_lseek>:
 8003a64:	4b02      	ldr	r3, [pc, #8]	; (8003a70 <_lseek+0xc>)
 8003a66:	2258      	movs	r2, #88	; 0x58
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6e:	4770      	bx	lr
 8003a70:	20000144 	.word	0x20000144

08003a74 <_sbrk>:
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <_sbrk+0x14>)
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	4602      	mov	r2, r0
 8003a7a:	b909      	cbnz	r1, 8003a80 <_sbrk+0xc>
 8003a7c:	4903      	ldr	r1, [pc, #12]	; (8003a8c <_sbrk+0x18>)
 8003a7e:	6019      	str	r1, [r3, #0]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	4402      	add	r2, r0
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	4770      	bx	lr
 8003a88:	200000bc 	.word	0x200000bc
 8003a8c:	20000148 	.word	0x20000148

08003a90 <_init>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	bf00      	nop
 8003a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a96:	bc08      	pop	{r3}
 8003a98:	469e      	mov	lr, r3
 8003a9a:	4770      	bx	lr

08003a9c <_fini>:
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9e:	bf00      	nop
 8003aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa2:	bc08      	pop	{r3}
 8003aa4:	469e      	mov	lr, r3
 8003aa6:	4770      	bx	lr
